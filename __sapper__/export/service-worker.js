!function(){"use strict";const e=1603070215568,t="cache"+e,c=["/client/client.f5ad92d3.js","/client/inject_styles.5607aec6.js","/client/index.85acb919.js","/client/index.b313bde2.js","/client/BackButton.a2bc8787.js","/client/characterStore.bc0e2cf8.js","/client/CharacterSheet.5abf4250.js","/client/BombList.4927c2b7.js","/client/StorageList.71288974.js","/client/AppendToGUUID.176d1458.js","/client/Skills.35c4252b.js","/client/Abilities.5f272c11.js","/client/SWBodyguard.54177d3a.js","/client/Speed.66ad8113.js","/client/RangedWeaponList.4703ea51.js","/client/Thermite.a457c57f.js","/client/GearBlock.b020dd56.js","/client/RandomRoll.f18d347c.js","/client/Specialty.adf26afb.js","/client/Traits.2656d3ca.js","/client/ConstitutionSkills.56e093ee.js","/client/_layout.37ffb050.js","/client/description.7f62e159.js","/client/Description.8a5b4d62.js","/client/properties.f49b249e.js","/client/Properties.2daf5f2c.js","/client/abilities.647954be.js","/client/skills.ef2e2b27.js","/client/Slider.666d272d.js","/client/traits.73673c10.js","/client/sheet.0d3a24ca.js","/client/gear.294a9a8c.js","/client/RandomStartingGear.1aaace4b.js","/client/d6.b655a31f.js","/client/load.268e2038.js","/client/new.a4dfdec5.js","/client/index.2491a734.js","/client/index.2b6a5ab9.js","/client/ManSubRule.310d04f9.js","/client/[chapter].4104ba08.js","/client/index.15230c7b.js","/client/Spinner.a9d45e28.js","/client/index.c7936ca1.js","/client/recover.33d65e01.js"].concat(["/service-worker-index.html","/404.svg","/__index.html","/favicon.gif","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/robots.txt"]),n=new Set(c);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(c))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const c of e)c!==t&&await caches.delete(c);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const c=new URL(t.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&n.has(c.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const c=await fetch(t.request);return e.put(t.request,c.clone()),c}catch(c){const n=await e.match(t.request);if(n)return n;throw c}})))))}))}();
