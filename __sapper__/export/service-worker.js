!function(){"use strict";const e=1604189353599,t="cache"+e,s=["/client/client.3aa91b53.js","/client/inject_styles.5607aec6.js","/client/index.1edca50d.js","/client/index.8b81eb43.js","/client/BackButton.ebf17981.js","/client/characterStore.ced0daea.js","/client/CharacterSheet.6fb059b5.js","/client/BodyParts.a39c5e48.js","/client/GearList.1d88c106.js","/client/Abilities.7a81e713.js","/client/StorageList.ef6a461b.js","/client/RangedWeaponList.010d2078.js","/client/Experience.a22c6273.js","/client/EquipmentList.46e98f8b.js","/client/BombList.a5aaa052.js","/client/Skills.62725977.js","/client/Capitalize.2568b2f7.js","/client/RandomRoll.09c297b8.js","/client/Rule.34d580b7.js","/client/Melee.7578e5b5.js","/client/GearBlock.08fa52f2.js","/client/Traits.3cc3d566.js","/client/ConstitutionSkills.6a6f5648.js","/client/index.6a248656.js","/client/Description.ad6ae788.js","/client/Slider.88e9f307.js","/client/Properties.90d7e7dc.js","/client/AbilityGroup.3f5bc680.js","/client/RandomStartingGear.39dc3c56.js","/client/d6.32a05458.js","/client/description.428a20b7.js","/client/properties.83f37518.js","/client/abilities.27054dc7.js","/client/skills.8a2d1732.js","/client/traits.0d97f3aa.js","/client/sheet.a3d158bb.js","/client/gear.33ac7de4.js","/client/load.953b99ef.js","/client/new.e1e0f287.js","/client/generator.d62ee6ab.js","/client/index.73d25e0c.js","/client/ManualRule.45e0984b.js","/client/[chapter].9848e6fe.js","/client/index.1d149250.js","/client/Spinner.34b718b2.js","/client/index.daa4c194.js","/client/recover.38b43eb1.js"].concat(["/service-worker-index.html","/404.svg","/__index.html","/favicon.gif","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/robots.txt"]),i=new Set(s);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const s of e)s!==t&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const s=new URL(t.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&i.has(s.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const s=await fetch(t.request);return e.put(t.request,s.clone()),s}catch(s){const i=await e.match(t.request);if(i)return i;throw s}})))))}))}();
