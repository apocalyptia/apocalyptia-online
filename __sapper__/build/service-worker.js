!function(){"use strict";const e=1603838481771,t="cache"+e,c=["/client/client.01fe1feb.js","/client/inject_styles.5607aec6.js","/client/index.0ad5b42f.js","/client/index.e6670492.js","/client/BackButton.719b4ed4.js","/client/characterStore.4b01392f.js","/client/CharacterSheet.dc27e181.js","/client/BodyParts.af84da0e.js","/client/GearList.20604559.js","/client/Abilities.968414b5.js","/client/StorageList.158c985d.js","/client/RangedWeaponList.5d280999.js","/client/Speed.2d4f7699.js","/client/EquipmentList.de5bf5e8.js","/client/BombList.74fba33d.js","/client/Skills.d55ecfb7.js","/client/RandomRoll.09c297b8.js","/client/Melee.e0d31a09.js","/client/GearBlock.39830ffc.js","/client/Rule.beec2aaf.js","/client/Traits.947aa5bd.js","/client/ConstitutionSkills.9b123a14.js","/client/load_character.434725fc.js","/client/new_character.42bfba05.js","/client/Description.ad6ae788.js","/client/Properties.84be1f5c.js","/client/RandomStartingGear.30b4fc72.js","/client/d6.32a05458.js","/client/description.9d6f94b6.js","/client/properties.df480f75.js","/client/abilities.d1ee0374.js","/client/AbilityGroup.53716797.js","/client/creator.7b709dfe.js","/client/Slider.dc762c12.js","/client/skills.c258b577.js","/client/traits.da708647.js","/client/sheet.e6813876.js","/client/gear.604b4710.js","/client/generator.88bbb671.js","/client/manual.37ab73ff.js","/client/ManualRule.8fec2446.js","/client/[chapter].15d8339f.js","/client/index.64790d8e.js","/client/Spinner.da8ca323.js","/client/index.1bc59b93.js","/client/recover.b39cd12d.js"].concat(["/service-worker-index.html","/404.svg","/__index.html","/favicon.gif","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/robots.txt"]),s=new Set(c);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(c))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const c of e)c!==t&&await caches.delete(c);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const c=new URL(t.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&s.has(c.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const c=await fetch(t.request);return e.put(t.request,c.clone()),c}catch(c){const s=await e.match(t.request);if(s)return s;throw c}})))))}))}();
