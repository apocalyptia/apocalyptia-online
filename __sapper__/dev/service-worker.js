(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1603160385411;

	const files = [
		"/service-worker-index.html",
		"/404.svg",
		"/__index.html",
		"/favicon.gif",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json",
		"/robots.txt"
	];

	const shell = [
		"/client/client.8c9a88d7.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.e5caa0a5.js",
		"/client/index.18ffd407.js",
		"/client/BackButton.e11aabf3.js",
		"/client/characterStore.c1c5b36c.js",
		"/client/CharacterSheet.22e617d2.js",
		"/client/BombList.4927c2b7.js",
		"/client/StorageList.71288974.js",
		"/client/AppendToGUUID.176d1458.js",
		"/client/Skills.35c4252b.js",
		"/client/Abilities.5f272c11.js",
		"/client/SWBodyguard.54177d3a.js",
		"/client/Speed.66ad8113.js",
		"/client/RangedWeaponList.4703ea51.js",
		"/client/Thermite.a457c57f.js",
		"/client/GearBlock.0507bfd6.js",
		"/client/RandomRoll.f18d347c.js",
		"/client/Specialty.adf26afb.js",
		"/client/Traits.2656d3ca.js",
		"/client/ConstitutionSkills.56e093ee.js",
		"/client/_layout.df47c981.js",
		"/client/description.b7e5d3b1.js",
		"/client/Description.8a5b4d62.js",
		"/client/properties.5ed4dbf0.js",
		"/client/Properties.2daf5f2c.js",
		"/client/abilities.6166b843.js",
		"/client/skills.925c7c17.js",
		"/client/Slider.2239e647.js",
		"/client/traits.c5281484.js",
		"/client/sheet.cb57e7d9.js",
		"/client/gear.65433256.js",
		"/client/RandomStartingGear.1aaace4b.js",
		"/client/d6.b655a31f.js",
		"/client/load.98d0a561.js",
		"/client/new.654ab1c8.js",
		"/client/index.daa3bb23.js",
		"/client/index.643cebb3.js",
		"/client/ManSubRule.c66ef972.js",
		"/client/[chapter].f1ad6de5.js",
		"/client/index.e8a7e481.js",
		"/client/Spinner.b890f831.js",
		"/client/index.638b56d8.js",
		"/client/recover.ad5bc3c5.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
