(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1604001085718;

	const files = [
		"/service-worker-index.html",
		"/404.svg",
		"/__index.html",
		"/favicon.gif",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json",
		"/robots.txt"
	];

	const shell = [
		"/client/client.17835442.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.7650af23.js",
		"/client/index.92e97e8e.js",
		"/client/BackButton.8cfe8078.js",
		"/client/characterStore.93682e8d.js",
		"/client/CharacterSheet.ef831a75.js",
		"/client/BodyParts.b9f9ebb3.js",
		"/client/GearList.b177dfc6.js",
		"/client/BombList.74fba33d.js",
		"/client/StorageList.158c985d.js",
		"/client/RangedWeaponList.5d280999.js",
		"/client/Skills.197a49a4.js",
		"/client/Capitalize.2568b2f7.js",
		"/client/EquipmentList.de5bf5e8.js",
		"/client/GearBlock.ba93c449.js",
		"/client/Properties.bf566bdc.js",
		"/client/Abilities.dba7d0c9.js",
		"/client/RandomRoll.09c297b8.js",
		"/client/Rule.beec2aaf.js",
		"/client/Melee.772fed8f.js",
		"/client/Traits.d7e95f71.js",
		"/client/ConstitutionSkills.358a05aa.js",
		"/client/index.258fc576.js",
		"/client/AbilityGroup.9acdaca5.js",
		"/client/Description.ad6ae788.js",
		"/client/RandomStartingGear.30b4fc72.js",
		"/client/Slider.44e9faa2.js",
		"/client/d6.32a05458.js",
		"/client/description.412628b4.js",
		"/client/properties.c7f2a3b5.js",
		"/client/abilities.14ad66d4.js",
		"/client/skills.dd897c37.js",
		"/client/traits.169a3dea.js",
		"/client/sheet.d4536b1c.js",
		"/client/gear.947e76c0.js",
		"/client/load.12122b90.js",
		"/client/new.d03bbde3.js",
		"/client/generator.aae458a5.js",
		"/client/index.a799a955.js",
		"/client/ManualRule.0c52cffb.js",
		"/client/[chapter].1e1b6b9b.js",
		"/client/index.61b9f704.js",
		"/client/Spinner.925ee8b5.js",
		"/client/index.03b8eb2f.js",
		"/client/recover.fa30f310.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
