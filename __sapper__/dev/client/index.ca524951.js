import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, u as userId, c as confirm, e as element, a as claim_element, b as children, f as detach_dev, g as attr_dev, h as add_location, j as insert_dev, n as noop, t as text, k as space, l as claim_text, m as claim_space, p as append_dev } from './client.bef6cb5c.js';

/* src/routes/index.svelte generated by Svelte v3.29.0 */
const file = "src/routes/index.svelte";

// (24:1) {:else}
function create_else_block(ctx) {
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;

	const block = {
		c: function create() {
			a0 = element("a");
			t0 = text("Login");
			t1 = space();
			a1 = element("a");
			t2 = text("Sign Up");
			this.h();
		},
		l: function claim(nodes) {
			a0 = claim_element(nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Login");
			a0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a1 = claim_element(nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Sign Up");
			a1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "/login");
			attr_dev(a0, "class", "link-btn");
			add_location(a0, file, 24, 2, 690);
			attr_dev(a1, "href", "/signup");
			attr_dev(a1, "class", "link-btn");
			add_location(a1, file, 25, 2, 736);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a0, anchor);
			append_dev(a0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, a1, anchor);
			append_dev(a1, t2);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(24:1) {:else}",
		ctx
	});

	return block;
}

// (20:1) {#if userId}
function create_if_block(ctx) {
	let a0;
	let t0;
	let t1;
	let a1;
	let t2;
	let t3;
	let a2;
	let t4;

	const block = {
		c: function create() {
			a0 = element("a");
			t0 = text("Character");
			t1 = space();
			a1 = element("a");
			t2 = text("Manual");
			t3 = space();
			a2 = element("a");
			t4 = text("Generator");
			this.h();
		},
		l: function claim(nodes) {
			a0 = claim_element(nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Character");
			a0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a1 = claim_element(nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "Manual");
			a1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			a2 = claim_element(nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "Generator");
			a2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "/character");
			attr_dev(a0, "class", "link-btn");
			add_location(a0, file, 20, 2, 525);
			attr_dev(a1, "href", "/manual");
			attr_dev(a1, "class", "link-btn");
			add_location(a1, file, 21, 2, 579);
			attr_dev(a2, "href", "/generator");
			attr_dev(a2, "class", "link-btn");
			add_location(a2, file, 22, 2, 627);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a0, anchor);
			append_dev(a0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, a1, anchor);
			append_dev(a1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, a2, anchor);
			append_dev(a2, t4);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(20:1) {#if userId}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (userId) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type();
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "cntr-card");
			add_location(div, file, 18, 0, 485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);

	onMount(_ => {
		const hash = window.location.hash.substr(1);

		const result = hash.split(`&`).reduce(
			(result, item) => {
				const parts = item.split(`=`);
				result[parts[0]] = parts[1];
				return result;
			},
			{}
		);

		if (result.confirmation_token) {
			confirm(result.confirmation_token);
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, userId, confirm });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2E1MjQ5NTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBpbXBvcnQgeyB1c2VySWQsIGNvbmZpcm0gfSBmcm9tICdzdG9yZXMvbmV0bGlmeVN0b3JlLmpzJ1xuXG4gICAgb25Nb3VudChfID0+IHtcbiAgICAgICAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKVxuICAgICAgICBjb25zdCByZXN1bHQgPSBoYXNoLnNwbGl0KGAmYCkucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gaXRlbS5zcGxpdChgPWApXG4gICAgICAgICAgICByZXN1bHRbcGFydHNbMF1dID0gcGFydHNbMV1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSwge30pXG4gICAgICAgIGlmIChyZXN1bHQuY29uZmlybWF0aW9uX3Rva2VuKSB7XG4gICAgICAgICAgICBjb25maXJtKHJlc3VsdC5jb25maXJtYXRpb25fdG9rZW4pXG4gICAgICAgIH1cbiAgICB9KVxuPC9zY3JpcHQ+XG5cblxuPGRpdiBjbGFzcz0nY250ci1jYXJkJz5cblx0eyNpZiB1c2VySWR9XG5cdFx0PGEgaHJlZj0nL2NoYXJhY3RlcicgY2xhc3M9J2xpbmstYnRuJz5DaGFyYWN0ZXI8L2E+XG5cdFx0PGEgaHJlZj0nL21hbnVhbCcgY2xhc3M9J2xpbmstYnRuJz5NYW51YWw8L2E+XG5cdFx0PGEgaHJlZj0nL2dlbmVyYXRvcicgY2xhc3M9J2xpbmstYnRuJz5HZW5lcmF0b3I8L2E+XG5cdHs6ZWxzZX1cblx0XHQ8YSBocmVmPScvbG9naW4nIGNsYXNzPSdsaW5rLWJ0bic+TG9naW48L2E+XG5cdFx0PGEgaHJlZj0nL3NpZ251cCcgY2xhc3M9J2xpbmstYnRuJz5TaWduIFVwPC9hPlxuXHR7L2lmfVxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BbUJNLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FmUixPQUFPLENBQUMsQ0FBQztRQUNDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7UUFDcEMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTTtJQUFFLE1BQU0sRUFBRSxJQUFJO1VBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztJQUN4QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztXQUNuQixNQUFNOzs7OztNQUViLE1BQU0sQ0FBQyxrQkFBa0I7R0FDekIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
