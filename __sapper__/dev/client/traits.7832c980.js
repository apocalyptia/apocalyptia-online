import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, J as validate_each_argument, u as validate_store, w as component_subscribe, v as validate_slots, e as element, t as text, f as claim_element, g as children, k as claim_text, h as detach_dev, m as add_location, p as insert_dev, n as append_dev, r as noop, $ as binding_callbacks, a0 as bind, b as space, x as create_component, j as claim_space, y as claim_component, l as attr_dev, z as mount_component, a1 as add_flush_callback, C as transition_in, A as transition_out, D as destroy_component, q as query_selector_all, G as listen_dev, K as set_data_dev, B as check_outros, L as destroy_each, H as run_all, E as set_store_value, F as group_outros } from './client.47a70721.js';
import { c as character } from './characterStore.39c7bd5f.js';
import './Specialty.adf26afb.js';
import './ConstitutionSkills.56e093ee.js';
import './RandomRoll.f18d347c.js';
import { T as Traits } from './Traits.2656d3ca.js';
import { S as Slider } from './Slider.ad4c579a.js';

/* src/routes/character/creator/traits.svelte generated by Svelte v3.29.0 */
const file = "src/routes/character/creator/traits.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[8] = list;
	child_ctx[9] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (21:1) {#each Traits.explanation as line}
function create_each_block_1(ctx) {
	let p;
	let t_value = /*line*/ ctx[10] + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 21, 2, 592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(21:1) {#each Traits.explanation as line}",
		ctx
	});

	return block;
}

// (29:1) {#each Traits.list as trait}
function create_each_block(ctx) {
	let div2;
	let div0;
	let t0_value = /*trait*/ ctx[7].name + "";
	let t0;
	let t1;
	let div1;
	let slider;
	let updating_value;
	let t2;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[5].call(null, value, /*trait*/ ctx[7]);
	}

	let slider_props = {
		name: /*trait*/ ctx[7].name.toLowerCase(),
		min: parseInt(1),
		max: parseInt(Traits.max)
	};

	if (/*$character*/ ctx[1].traits[/*trait*/ ctx[7].name.toLowerCase()].score !== void 0) {
		slider_props.value = /*$character*/ ctx[1].traits[/*trait*/ ctx[7].name.toLowerCase()].score;
	}

	slider = new Slider({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
	slider.$on("input", /*input_handler*/ ctx[6]);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			create_component(slider.$$.fragment);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(slider.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "stat-label");
			add_location(div0, file, 30, 3, 774);
			attr_dev(div1, "class", "stat-column");
			add_location(div1, file, 31, 3, 820);
			attr_dev(div2, "class", "section-card");
			add_location(div2, file, 29, 2, 744);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, t0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			mount_component(slider, div1, null);
			append_dev(div2, t2);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const slider_changes = {};

			if (!updating_value && dirty & /*$character, Traits*/ 2) {
				updating_value = true;
				slider_changes.value = /*$character*/ ctx[1].traits[/*trait*/ ctx[7].name.toLowerCase()].score;
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(slider);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:1) {#each Traits.list as trait}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div0;
	let t3;
	let div1;
	let h3;
	let t4;
	let t5;
	let t6;
	let div2;
	let t7;
	let div3;
	let button0;
	let t8;
	let t9;
	let button1;
	let t10;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = Traits.explanation;
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Traits.list;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Traits");
			t2 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			div1 = element("div");
			h3 = element("h3");
			t4 = text("Points Remaining: ");
			t5 = text(/*remaining*/ ctx[0]);
			t6 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div3 = element("div");
			button0 = element("button");
			t8 = text("Reset");
			t9 = space();
			button1 = element("button");
			t10 = text("Random");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-xkmzfm\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Traits");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t4 = claim_text(h3_nodes, "Points Remaining: ");
			t5 = claim_text(h3_nodes, /*remaining*/ ctx[0]);
			h3_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			button0 = claim_element(div3_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t8 = claim_text(button0_nodes, "Reset");
			button0_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			button1 = claim_element(div3_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t10 = claim_text(button1_nodes, "Random");
			button1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Apocalyptia Online - Character Creator - Traits";
			add_location(h1, file, 18, 0, 512);
			attr_dev(div0, "class", "explanation");
			add_location(div0, file, 19, 0, 528);
			add_location(h3, file, 25, 1, 647);
			attr_dev(div1, "class", "remaining");
			add_location(div1, file, 24, 0, 622);
			attr_dev(div2, "class", "list");
			add_location(div2, file, 27, 0, 693);
			attr_dev(button0, "class", "small-cntr-btn");
			add_location(button0, file, 44, 1, 1126);
			attr_dev(button1, "class", "small-cntr-btn");
			add_location(button1, file, 47, 1, 1195);
			attr_dev(div3, "class", "btn-row");
			add_location(div3, file, 43, 0, 1103);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t4);
			append_dev(h3, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			insert_dev(target, t7, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, button0);
			append_dev(button0, t8);
			append_dev(div3, t9);
			append_dev(div3, button1);
			append_dev(button1, t10);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*reset*/ ctx[4], false, false, false),
					listen_dev(button1, "click", /*random*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*Traits*/ 0) {
				each_value_1 = Traits.explanation;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (!current || dirty & /*remaining*/ 1) set_data_dev(t5, /*remaining*/ ctx[0]);

			if (dirty & /*Traits, parseInt, $character, assign*/ 6) {
				each_value = Traits.list;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div3);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $character;
	validate_store(character, "character");
	component_subscribe($$self, character, $$value => $$invalidate(1, $character = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Traits", slots, []);
	const assign = event => set_store_value(character, $character = Traits.assign($character, event.target), $character);
	const random = () => set_store_value(character, $character = Traits.random($character), $character);
	const reset = () => set_store_value(character, $character = Traits.reset($character), $character);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Traits> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value, trait) {
		$character.traits[trait.name.toLowerCase()].score = value;
		character.set($character);
	}

	const input_handler = event => assign(event);

	$$self.$capture_state = () => ({
		Slider,
		Traits,
		character,
		assign,
		random,
		reset,
		remaining,
		$character
	});

	$$self.$inject_state = $$props => {
		if ("remaining" in $$props) $$invalidate(0, remaining = $$props.remaining);
	};

	let remaining;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$character*/ 2) {
			 $$invalidate(0, remaining = Traits.remaining($character));
		}
	};

	return [
		remaining,
		$character,
		assign,
		random,
		reset,
		slider_value_binding,
		input_handler
	];
}

class Traits_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Traits_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Traits_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhaXRzLjc4MzJjOTgwLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2NoYXJhY3Rlci9jcmVhdG9yL3RyYWl0cy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IFNsaWRlciBmcm9tICd2aWV3cy93aWRnZXRzL1NsaWRlci5zdmVsdGUnXG5cdGltcG9ydCBUcmFpdHMgZnJvbSAncnVsZXMvdHJhaXRzL1RyYWl0cy5qcydcblx0aW1wb3J0IHsgY2hhcmFjdGVyIH0gZnJvbSAnc3RvcmVzL2NoYXJhY3RlclN0b3JlLmpzJ1xuXG5cdCQ6IHJlbWFpbmluZyA9IFRyYWl0cy5yZW1haW5pbmcoJGNoYXJhY3RlcilcblxuXHRjb25zdCBhc3NpZ24gPSAoZXZlbnQpID0+ICRjaGFyYWN0ZXIgPSBUcmFpdHMuYXNzaWduKCRjaGFyYWN0ZXIsIGV2ZW50LnRhcmdldClcblxuXHRjb25zdCByYW5kb20gPSAoKSA9PiAkY2hhcmFjdGVyID0gVHJhaXRzLnJhbmRvbSgkY2hhcmFjdGVyKVxuXG5cdGNvbnN0IHJlc2V0ID0gKCkgPT4gJGNoYXJhY3RlciA9IFRyYWl0cy5yZXNldCgkY2hhcmFjdGVyKVxuPC9zY3JpcHQ+XG5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QXBvY2FseXB0aWEgT25saW5lIC0gQ2hhcmFjdGVyIENyZWF0b3IgLSBUcmFpdHM8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxoMT5UcmFpdHM8L2gxPlxuPGRpdiBjbGFzcz0nZXhwbGFuYXRpb24nPlxuXHR7I2VhY2ggVHJhaXRzLmV4cGxhbmF0aW9uIGFzIGxpbmV9XG5cdFx0PHA+e2xpbmV9PC9wPlxuXHR7L2VhY2h9XG48L2Rpdj5cbjxkaXYgY2xhc3M9J3JlbWFpbmluZyc+XG5cdDxoMz5Qb2ludHMgUmVtYWluaW5nOiB7cmVtYWluaW5nfTwvaDM+XG48L2Rpdj5cbjxkaXYgY2xhc3M9J2xpc3QnPlxuXHR7I2VhY2ggVHJhaXRzLmxpc3QgYXMgdHJhaXR9XG5cdFx0PGRpdiBjbGFzcz0nc2VjdGlvbi1jYXJkJz5cblx0XHRcdDxkaXYgY2xhc3M9J3N0YXQtbGFiZWwnPnt0cmFpdC5uYW1lfTwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz0nc3RhdC1jb2x1bW4nPlxuXHRcdFx0XHQ8U2xpZGVyXG5cdFx0XHRcdFx0bmFtZT0ne3RyYWl0Lm5hbWUudG9Mb3dlckNhc2UoKX0nXG5cdFx0XHRcdFx0bWluPXtwYXJzZUludCgxKX1cblx0XHRcdFx0XHRtYXg9e3BhcnNlSW50KFRyYWl0cy5tYXgpfVxuXHRcdFx0XHRcdGJpbmQ6dmFsdWU9eyRjaGFyYWN0ZXIudHJhaXRzW3RyYWl0Lm5hbWUudG9Mb3dlckNhc2UoKV0uc2NvcmV9XG5cdFx0XHRcdFx0b246aW5wdXQ9eyhldmVudCkgPT4gYXNzaWduKGV2ZW50KX1cblx0XHRcdFx0Lz5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHR7L2VhY2h9XG48L2Rpdj5cbjxkaXYgY2xhc3M9J2J0bi1yb3cnPlxuXHQ8YnV0dG9uIGNsYXNzPSdzbWFsbC1jbnRyLWJ0bicgb246Y2xpY2s9e3Jlc2V0fT5cblx0XHRSZXNldFxuXHQ8L2J1dHRvbj5cblx0PGJ1dHRvbiBjbGFzcz0nc21hbGwtY250ci1idG4nIG9uOmNsaWNrPXtyYW5kb219PlxuXHRcdFJhbmRvbVxuXHQ8L2J1dHRvbj5cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQXFCTSxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFTa0IsR0FBSyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7O2tCQUcxQixHQUFLLElBQUMsSUFBSSxDQUFDLFdBQVc7T0FDeEIsUUFBUSxDQUFDLENBQUM7T0FDVixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUc7OztvQkFDWixHQUFVLElBQUMsTUFBTSxXQUFDLEdBQUssSUFBQyxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUs7c0NBQWpELEdBQVUsSUFBQyxNQUFNLFdBQUMsR0FBSyxJQUFDLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQ0FBakQsR0FBVSxJQUFDLE1BQU0sV0FBQyxHQUFLLElBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWhCMUQsTUFBTSxDQUFDLFdBQVc7Ozs7a0NBQXZCLE1BQUk7Ozs7a0JBUUMsTUFBTSxDQUFDLElBQUk7Ozs7Z0NBQWhCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFIaUIsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQ0FBVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NENBbUJTLEdBQUs7NkNBR0wsR0FBTTs7Ozs7Ozs7bUJBM0J4QyxNQUFNLENBQUMsV0FBVzs7OztpQ0FBdkIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FBSixNQUFJOzs7MkVBS2lCLEdBQVM7OztpQkFHekIsTUFBTSxDQUFDLElBQUk7Ozs7K0JBQWhCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7OztrQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXJCQSxNQUFNLEdBQUksS0FBSywrQkFBSyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU07T0FFdkUsTUFBTSxvQ0FBUyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVO09BRXBELEtBQUssb0NBQVMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVTs7Ozs7Ozs7RUF5QnhDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSzs7Ozt1QkFDbEQsS0FBSyxJQUFLLE1BQU0sQ0FBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWhDbEMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
