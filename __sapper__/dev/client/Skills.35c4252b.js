import { S as Skill, a as Specialty } from './Specialty.adf26afb.js';
import { A as AgilitySkills, B as BrainsSkills, C as ConstitutionSkills } from './ConstitutionSkills.56e093ee.js';
import { R as RandomRoll } from './RandomRoll.f18d347c.js';

var PropSort = (a, b, prop) => {
	if (a[prop] > b[prop]) return 1
	if (a[prop] < b[prop]) return -1
	return 0
};

const Leadership = new Skill({
	id: `7596f84f-d625-409d-a7b0-4e0775d96719`,
	name: `Leadership`,
	desc: [
		`Directing the efforts of others`,
		`Modifiers from multiple uses of the same Leadership Specialty do not stack.`,
	],
	parent: `Demeanor`,
	diff: `Demeanor`,
	specs: {
		encourage: new Specialty({
			id: `95b70f3c-d67e-41ae-99ff-2d5864356a59`,
			name: `Encourage`,
			desc: [
				`Roll vs [total target(s) Demeanor]`,
				`Target(s) get a bonus = [your Demeanor] to one roll you choose.`,
			]
		}),
		intimidate: new Specialty({
			id: `ff3e883c-2952-459e-8dbf-d3f666383ec9`,
			name: `Intimidate`,
			desc: [
				`Roll vs [total target(s) Demeanor]`,
				`Target(s) take a penalty = [your Demeanor] to any roll except one you choose.`
			]
		})
	}
});

const Perform = new Skill({
	id: `4507c9b3-3b2e-4c05-be79-89785735180d`,
	name: `Perform`,
	desc: [
		`Captivating an audience.`,
	],
	parent: `Demeanor`,
	diff: `Perception`,
	specs: {
		distract: new Specialty({
			id: `e0029c54-6812-4b0d-b143-f1f8dbc806b0`,
			name: `Distract`,
			desc: [
				`Target is Defenseless for 1 round.`,
			]
		}),
		deceive: new Specialty({
			id: `f6ded447-ec92-4720-8f68-812e8d3a02f5`,
			name: `Deceive`,
			desc: [
				`Target believes your plausible falsehood.`,
			]
		})
	}
});

const Socialize = new Skill({
	id: `aa5d33c4-d9ec-4974-8064-55aba4e75d88`,
	name: `Socialize`,
	desc: [
		`Alter a person’s Attitude by one step.`,
	],
	parent: `Demeanor`,
	diff: `Demeanor`,
	specs: {
		persuade: new Specialty({
			id: `8ad47e9b-a223-455f-9499-72a012509577`,
			name: `Persuade`,
			desc: [
				`(d6mins) Target seriously considers your opinion.`,
			]
		}),
		therapy: new Specialty({
			id: `83398ae1-5fad-45ef-a523-09d2b403ac7c`,
			name: `Therapy`,
			desc: [
				`Heal 1 Trauma`,
				`Cannot be performed again on the same day.`,
				`d6 Trauma on a Botch.`,
			]
		})
	}
});

const Tame = new Skill({
	id: `1e616ba5-99fb-4f11-853f-fe938eed016b`,
	name: `Tame`,
	desc: [
		`Alter an animal’s Attitude by one step.`,
	],
	parent: `Demeanor`,
	diff: `Demeanor`,
	specs: {
		command: new Specialty({
			id: `81e355cf-c841-4c88-802b-1d4c170ef741`,
			name: `Command`,
			desc: [
				`Animal obeys your command.`,
			]
		}),
		train: new Specialty({
			id: `ee8cc929-151e-4f6c-abff-293379d5ee53`,
			name: `Train`,
			desc: [
				`(1wk) Animals learn commands = [its Brains x 2].`,
			]
		})
	}
});

const DemeanorSkills = [
	Leadership,
	Perform,
	Socialize,
	Tame,
];

const SkillList = [
	...AgilitySkills,
	...BrainsSkills,
	...ConstitutionSkills,
	...DemeanorSkills,
];

var Skills = {
	name: `Skills`,
	explanation: [
		`You get Brains x 6 Skill points to assign.`,
		`Skills range from 0 to 6.`,
		`Skill rolls are [d6 + Skill].`,
		`Trait scores set the limit for their Skills.`,
	],
	list: SkillList,
	groups: [
		{
			name: `Agility`,
			list: AgilitySkills
		},
		{
			name: `Brains`,
			list: BrainsSkills
		},
		{
			name: `Constitution`,
			list: ConstitutionSkills
		},
		{
			name: `Demeanor`,
			list: DemeanorSkills
		},
	],
	specs: Object.values(SkillList)
				.map((s) => Object.values(s.specs))
				.reduce((a, b) => a.concat(b), [])
				.sort((a, b) => PropSort(a, b, `name`)),
	startingPoints: (c) => c.traits.brains.score * 6,
	assign: function(c, target) {
		c.skills[target.name].score = parseInt(target.value);
		return this.limit(c, target.name)
	},
	limit: function(c, targetName) {
		const max = c.traits[c.skills[targetName].parent.toLowerCase()].score;
		while(this.remaining(c) < 0 || c.skills[targetName].score > max) {
			c.skills[targetName].score--;
		}
		return c
	},
	random: function(c) {
		c = this.reset(c);
		while(this.remaining(c) > 0) {
			const t = RandomRoll(Object.keys(c.skills));
			const parentScore = c.traits[c.skills[t].parent.toLowerCase()].score;
			if (c.skills[t].score < parentScore) c.skills[t].score++;
		}
		return c
	},
	remaining: function(c) {
		const spent = Object.values(c.skills).reduce((t, { score }) => t += score, 0);
		return this.startingPoints(c) - spent
	},
	reset: function(c) {
		Object.keys(c.skills).forEach(t => c.skills[t].score = 0);
		return c
	},
};

export { DemeanorSkills as D, PropSort as P, Skills as S };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
