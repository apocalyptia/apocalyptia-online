import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, v as validate_store, V as subscribe, f as element, w as text, h as space, j as claim_element, k as children, x as claim_text, l as detach_dev, m as claim_space, n as attr_dev, p as add_location, t as insert_dev, r as append_dev, y as set_data_dev, u as noop, W as to_number, N as set_input_value, I as listen_dev, L as validate_each_argument, c as component_subscribe, Y as beforeUpdate, X as empty, z as create_component, q as query_selector_all, A as claim_component, B as mount_component, E as transition_in, C as transition_out, M as destroy_each, F as destroy_component, G as set_store_value } from './client.ad852c9c.js';
import { c as character } from './characterStore.789c7f8d.js';
import './Specialty.adf26afb.js';
import './Speed.66ad8113.js';
import { P as Properties } from './Properties.2daf5f2c.js';

/* src/components/views/character/BodyParts.svelte generated by Svelte v3.29.0 */

const file = "src/components/views/character/BodyParts.svelte";

// (15:4) {:else}
function create_else_block_5(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.head.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.head.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 15, 5, 329);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.head.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.head.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.head.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.head.current) {
				set_input_value(input, /*$character*/ ctx[2].health.head.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_5.name,
		type: "else",
		source: "(15:4) {:else}",
		ctx
	});

	return block;
}

// (13:4) {#if mode == 'readonly'}
function create_if_block_5(ctx) {
	let t_value = /*$character*/ ctx[2].health.head.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.head.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(13:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

// (31:4) {:else}
function create_else_block_4(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.leftArm.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.leftArm.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 31, 5, 789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.leftArm.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_1*/ ctx[4]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.leftArm.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.leftArm.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.leftArm.current) {
				set_input_value(input, /*$character*/ ctx[2].health.leftArm.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(31:4) {:else}",
		ctx
	});

	return block;
}

// (29:4) {#if mode == 'readonly'}
function create_if_block_4(ctx) {
	let t_value = /*$character*/ ctx[2].health.leftArm.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.leftArm.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(29:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

// (47:4) {:else}
function create_else_block_3(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.leftLeg.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.leftLeg.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 47, 5, 1261);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.leftLeg.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_2*/ ctx[5]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.leftLeg.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.leftLeg.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.leftLeg.current) {
				set_input_value(input, /*$character*/ ctx[2].health.leftLeg.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(47:4) {:else}",
		ctx
	});

	return block;
}

// (45:4) {#if mode == 'readonly'}
function create_if_block_3(ctx) {
	let t_value = /*$character*/ ctx[2].health.leftLeg.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.leftLeg.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(45:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

// (79:4) {:else}
function create_else_block_2(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.torso.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.torso.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 79, 5, 2147);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.torso.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_3*/ ctx[6]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.torso.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.torso.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.torso.current) {
				set_input_value(input, /*$character*/ ctx[2].health.torso.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(79:4) {:else}",
		ctx
	});

	return block;
}

// (77:4) {#if mode == 'readonly'}
function create_if_block_2(ctx) {
	let t_value = /*$character*/ ctx[2].health.torso.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.torso.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(77:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

// (95:4) {:else}
function create_else_block_1(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.rightArm.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.rightArm.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 95, 5, 2614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.rightArm.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_4*/ ctx[7]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.rightArm.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.rightArm.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.rightArm.current) {
				set_input_value(input, /*$character*/ ctx[2].health.rightArm.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(95:4) {:else}",
		ctx
	});

	return block;
}

// (93:4) {#if mode == 'readonly'}
function create_if_block_1(ctx) {
	let t_value = /*$character*/ ctx[2].health.rightArm.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.rightArm.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(93:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

// (111:4) {:else}
function create_else_block(ctx) {
	let input;
	let input_min_value;
	let input_max_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "number");
			attr_dev(input, "min", input_min_value = "-" + /*$character*/ ctx[2].health.rightLeg.score);
			attr_dev(input, "max", input_max_value = /*$character*/ ctx[2].health.rightLeg.score);
			attr_dev(input, "class", "svelte-eczy0o");
			add_location(input, file, 111, 5, 3093);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			set_input_value(input, /*$character*/ ctx[2].health.rightLeg.current);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_5*/ ctx[8]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && input_min_value !== (input_min_value = "-" + /*$character*/ ctx[2].health.rightLeg.score)) {
				attr_dev(input, "min", input_min_value);
			}

			if (dirty & /*$character*/ 4 && input_max_value !== (input_max_value = /*$character*/ ctx[2].health.rightLeg.score)) {
				attr_dev(input, "max", input_max_value);
			}

			if (dirty & /*$character*/ 4 && to_number(input.value) !== /*$character*/ ctx[2].health.rightLeg.current) {
				set_input_value(input, /*$character*/ ctx[2].health.rightLeg.current);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(111:4) {:else}",
		ctx
	});

	return block;
}

// (109:4) {#if mode == 'readonly'}
function create_if_block(ctx) {
	let t_value = /*$character*/ ctx[2].health.rightLeg.score + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$character*/ 4 && t_value !== (t_value = /*$character*/ ctx[2].health.rightLeg.score + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(109:4) {#if mode == 'readonly'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div30;
	let div9;
	let div2;
	let div0;
	let t0_value = /*$character*/ ctx[2].health.head.name + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let t3_value = /*$character*/ ctx[2].health.head.score + "";
	let t3;
	let t4;
	let div5;
	let div3;
	let t5_value = /*$character*/ ctx[2].health.leftArm.name + "";
	let t5;
	let t6;
	let div4;
	let t7;
	let t8_value = /*$character*/ ctx[2].health.leftArm.score + "";
	let t8;
	let t9;
	let div8;
	let div6;
	let t10_value = /*$character*/ ctx[2].health.leftLeg.name + "";
	let t10;
	let t11;
	let div7;
	let t12;
	let t13_value = /*$character*/ ctx[2].health.leftLeg.score + "";
	let t13;
	let t14;
	let div19;
	let div11;
	let div10;
	let t15;
	let div15;
	let div12;
	let t16;
	let div13;
	let t17;
	let div14;
	let t18;
	let div18;
	let div16;
	let t19;
	let div17;
	let t20;
	let div29;
	let div22;
	let div20;
	let t21_value = /*$character*/ ctx[2].health.torso.name + "";
	let t21;
	let t22;
	let div21;
	let t23;
	let t24_value = /*$character*/ ctx[2].health.torso.score + "";
	let t24;
	let t25;
	let div25;
	let div23;
	let t26_value = /*$character*/ ctx[2].health.rightArm.name + "";
	let t26;
	let t27;
	let div24;
	let t28;
	let t29_value = /*$character*/ ctx[2].health.rightArm.score + "";
	let t29;
	let t30;
	let div28;
	let div26;
	let t31_value = /*$character*/ ctx[2].health.rightLeg.name + "";
	let t31;
	let t32;
	let div27;
	let t33;
	let t34_value = /*$character*/ ctx[2].health.rightLeg.score + "";
	let t34;

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block_5;
		return create_else_block_5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block_4;
		return create_else_block_4;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block_3;
		return create_else_block_3;
	}

	let current_block_type_2 = select_block_type_2(ctx);
	let if_block2 = current_block_type_2(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block_2;
		return create_else_block_2;
	}

	let current_block_type_3 = select_block_type_3(ctx);
	let if_block3 = current_block_type_3(ctx);

	function select_block_type_4(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type_4 = select_block_type_4(ctx);
	let if_block4 = current_block_type_4(ctx);

	function select_block_type_5(ctx, dirty) {
		if (/*mode*/ ctx[1] == "readonly") return create_if_block;
		return create_else_block;
	}

	let current_block_type_5 = select_block_type_5(ctx);
	let if_block5 = current_block_type_5(ctx);

	const block = {
		c: function create() {
			div30 = element("div");
			div9 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			if_block0.c();
			t2 = text(" / ");
			t3 = text(t3_value);
			t4 = space();
			div5 = element("div");
			div3 = element("div");
			t5 = text(t5_value);
			t6 = space();
			div4 = element("div");
			if_block1.c();
			t7 = text(" / ");
			t8 = text(t8_value);
			t9 = space();
			div8 = element("div");
			div6 = element("div");
			t10 = text(t10_value);
			t11 = space();
			div7 = element("div");
			if_block2.c();
			t12 = text(" / ");
			t13 = text(t13_value);
			t14 = space();
			div19 = element("div");
			div11 = element("div");
			div10 = element("div");
			t15 = space();
			div15 = element("div");
			div12 = element("div");
			t16 = space();
			div13 = element("div");
			t17 = space();
			div14 = element("div");
			t18 = space();
			div18 = element("div");
			div16 = element("div");
			t19 = space();
			div17 = element("div");
			t20 = space();
			div29 = element("div");
			div22 = element("div");
			div20 = element("div");
			t21 = text(t21_value);
			t22 = space();
			div21 = element("div");
			if_block3.c();
			t23 = text(" / ");
			t24 = text(t24_value);
			t25 = space();
			div25 = element("div");
			div23 = element("div");
			t26 = text(t26_value);
			t27 = space();
			div24 = element("div");
			if_block4.c();
			t28 = text(" / ");
			t29 = text(t29_value);
			t30 = space();
			div28 = element("div");
			div26 = element("div");
			t31 = text(t31_value);
			t32 = space();
			div27 = element("div");
			if_block5.c();
			t33 = text(" / ");
			t34 = text(t34_value);
			this.h();
		},
		l: function claim(nodes) {
			div30 = claim_element(nodes, "DIV", { class: true });
			var div30_nodes = children(div30);
			div9 = claim_element(div30_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div2 = claim_element(div9_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block0.l(div1_nodes);
			t2 = claim_text(div1_nodes, " / ");
			t3 = claim_text(div1_nodes, t3_value);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div9_nodes);
			div5 = claim_element(div9_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t5 = claim_text(div3_nodes, t5_value);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			if_block1.l(div4_nodes);
			t7 = claim_text(div4_nodes, " / ");
			t8 = claim_text(div4_nodes, t8_value);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t9 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			t10 = claim_text(div6_nodes, t10_value);
			div6_nodes.forEach(detach_dev);
			t11 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			if_block2.l(div7_nodes);
			t12 = claim_text(div7_nodes, " / ");
			t13 = claim_text(div7_nodes, t13_value);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t14 = claim_space(div30_nodes);
			div19 = claim_element(div30_nodes, "DIV", { class: true });
			var div19_nodes = children(div19);
			div11 = claim_element(div19_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			children(div10).forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			t15 = claim_space(div19_nodes);
			div15 = claim_element(div19_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			div12 = claim_element(div15_nodes, "DIV", { class: true });
			children(div12).forEach(detach_dev);
			t16 = claim_space(div15_nodes);
			div13 = claim_element(div15_nodes, "DIV", { class: true });
			children(div13).forEach(detach_dev);
			t17 = claim_space(div15_nodes);
			div14 = claim_element(div15_nodes, "DIV", { class: true });
			children(div14).forEach(detach_dev);
			div15_nodes.forEach(detach_dev);
			t18 = claim_space(div19_nodes);
			div18 = claim_element(div19_nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			div16 = claim_element(div18_nodes, "DIV", { class: true });
			children(div16).forEach(detach_dev);
			t19 = claim_space(div18_nodes);
			div17 = claim_element(div18_nodes, "DIV", { class: true });
			children(div17).forEach(detach_dev);
			div18_nodes.forEach(detach_dev);
			div19_nodes.forEach(detach_dev);
			t20 = claim_space(div30_nodes);
			div29 = claim_element(div30_nodes, "DIV", { class: true });
			var div29_nodes = children(div29);
			div22 = claim_element(div29_nodes, "DIV", { class: true });
			var div22_nodes = children(div22);
			div20 = claim_element(div22_nodes, "DIV", { class: true });
			var div20_nodes = children(div20);
			t21 = claim_text(div20_nodes, t21_value);
			div20_nodes.forEach(detach_dev);
			t22 = claim_space(div22_nodes);
			div21 = claim_element(div22_nodes, "DIV", { class: true });
			var div21_nodes = children(div21);
			if_block3.l(div21_nodes);
			t23 = claim_text(div21_nodes, " / ");
			t24 = claim_text(div21_nodes, t24_value);
			div21_nodes.forEach(detach_dev);
			div22_nodes.forEach(detach_dev);
			t25 = claim_space(div29_nodes);
			div25 = claim_element(div29_nodes, "DIV", { class: true });
			var div25_nodes = children(div25);
			div23 = claim_element(div25_nodes, "DIV", { class: true });
			var div23_nodes = children(div23);
			t26 = claim_text(div23_nodes, t26_value);
			div23_nodes.forEach(detach_dev);
			t27 = claim_space(div25_nodes);
			div24 = claim_element(div25_nodes, "DIV", { class: true });
			var div24_nodes = children(div24);
			if_block4.l(div24_nodes);
			t28 = claim_text(div24_nodes, " / ");
			t29 = claim_text(div24_nodes, t29_value);
			div24_nodes.forEach(detach_dev);
			div25_nodes.forEach(detach_dev);
			t30 = claim_space(div29_nodes);
			div28 = claim_element(div29_nodes, "DIV", { class: true });
			var div28_nodes = children(div28);
			div26 = claim_element(div28_nodes, "DIV", { class: true });
			var div26_nodes = children(div26);
			t31 = claim_text(div26_nodes, t31_value);
			div26_nodes.forEach(detach_dev);
			t32 = claim_space(div28_nodes);
			div27 = claim_element(div28_nodes, "DIV", { class: true });
			var div27_nodes = children(div27);
			if_block5.l(div27_nodes);
			t33 = claim_text(div27_nodes, " / ");
			t34 = claim_text(div27_nodes, t34_value);
			div27_nodes.forEach(detach_dev);
			div28_nodes.forEach(detach_dev);
			div29_nodes.forEach(detach_dev);
			div30_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "body-part-name");
			add_location(div0, file, 8, 3, 139);
			attr_dev(div1, "class", "body-part-numbers svelte-eczy0o");
			add_location(div1, file, 11, 3, 215);
			attr_dev(div2, "class", "head-label svelte-eczy0o");
			add_location(div2, file, 7, 2, 111);
			attr_dev(div3, "class", "body-part-name");
			add_location(div3, file, 24, 3, 593);
			attr_dev(div4, "class", "body-part-numbers svelte-eczy0o");
			add_location(div4, file, 27, 3, 672);
			attr_dev(div5, "class", "left-arm-label svelte-eczy0o");
			add_location(div5, file, 23, 2, 561);
			attr_dev(div6, "class", "body-part-name");
			add_location(div6, file, 40, 3, 1065);
			attr_dev(div7, "class", "body-part-numbers svelte-eczy0o");
			add_location(div7, file, 43, 3, 1144);
			attr_dev(div8, "class", "left-leg-label svelte-eczy0o");
			add_location(div8, file, 39, 2, 1033);
			attr_dev(div9, "class", "left-column svelte-eczy0o");
			add_location(div9, file, 6, 1, 83);
			attr_dev(div10, "class", "head body-part svelte-eczy0o");
			add_location(div10, file, 58, 3, 1570);
			attr_dev(div11, "class", "head-level svelte-eczy0o");
			add_location(div11, file, 57, 2, 1542);
			attr_dev(div12, "class", "left-arm arm body-part svelte-eczy0o");
			add_location(div12, file, 61, 3, 1641);
			attr_dev(div13, "class", "torso body-part svelte-eczy0o");
			add_location(div13, file, 62, 3, 1683);
			attr_dev(div14, "class", "right-arm arm body-part svelte-eczy0o");
			add_location(div14, file, 63, 3, 1718);
			attr_dev(div15, "class", "torso-level svelte-eczy0o");
			add_location(div15, file, 60, 2, 1612);
			attr_dev(div16, "class", "left-leg leg body-part svelte-eczy0o");
			add_location(div16, file, 66, 3, 1797);
			attr_dev(div17, "class", "right-leg leg body-part svelte-eczy0o");
			add_location(div17, file, 67, 3, 1839);
			attr_dev(div18, "class", "legs-level svelte-eczy0o");
			add_location(div18, file, 65, 2, 1769);
			attr_dev(div19, "class", "center-column svelte-eczy0o");
			add_location(div19, file, 56, 1, 1512);
			attr_dev(div20, "class", "body-part-name");
			add_location(div20, file, 72, 3, 1955);
			attr_dev(div21, "class", "body-part-numbers svelte-eczy0o");
			add_location(div21, file, 75, 3, 2032);
			attr_dev(div22, "class", "torso-label svelte-eczy0o");
			add_location(div22, file, 71, 2, 1926);
			attr_dev(div23, "class", "body-part-name");
			add_location(div23, file, 88, 3, 2416);
			attr_dev(div24, "class", "body-part-numbers svelte-eczy0o");
			add_location(div24, file, 91, 3, 2496);
			attr_dev(div25, "class", "right-arm-label svelte-eczy0o");
			add_location(div25, file, 87, 2, 2383);
			attr_dev(div26, "class", "body-part-name");
			add_location(div26, file, 104, 3, 2895);
			attr_dev(div27, "class", "body-part-numbers svelte-eczy0o");
			add_location(div27, file, 107, 3, 2975);
			attr_dev(div28, "class", "right-leg-label svelte-eczy0o");
			add_location(div28, file, 103, 2, 2862);
			attr_dev(div29, "class", "right-column svelte-eczy0o");
			add_location(div29, file, 70, 1, 1897);
			attr_dev(div30, "class", "body-parts-section svelte-eczy0o");
			add_location(div30, file, 5, 0, 49);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div30, anchor);
			append_dev(div30, div9);
			append_dev(div9, div2);
			append_dev(div2, div0);
			append_dev(div0, t0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			if_block0.m(div1, null);
			append_dev(div1, t2);
			append_dev(div1, t3);
			append_dev(div9, t4);
			append_dev(div9, div5);
			append_dev(div5, div3);
			append_dev(div3, t5);
			append_dev(div5, t6);
			append_dev(div5, div4);
			if_block1.m(div4, null);
			append_dev(div4, t7);
			append_dev(div4, t8);
			append_dev(div9, t9);
			append_dev(div9, div8);
			append_dev(div8, div6);
			append_dev(div6, t10);
			append_dev(div8, t11);
			append_dev(div8, div7);
			if_block2.m(div7, null);
			append_dev(div7, t12);
			append_dev(div7, t13);
			append_dev(div30, t14);
			append_dev(div30, div19);
			append_dev(div19, div11);
			append_dev(div11, div10);
			append_dev(div19, t15);
			append_dev(div19, div15);
			append_dev(div15, div12);
			append_dev(div15, t16);
			append_dev(div15, div13);
			append_dev(div15, t17);
			append_dev(div15, div14);
			append_dev(div19, t18);
			append_dev(div19, div18);
			append_dev(div18, div16);
			append_dev(div18, t19);
			append_dev(div18, div17);
			append_dev(div30, t20);
			append_dev(div30, div29);
			append_dev(div29, div22);
			append_dev(div22, div20);
			append_dev(div20, t21);
			append_dev(div22, t22);
			append_dev(div22, div21);
			if_block3.m(div21, null);
			append_dev(div21, t23);
			append_dev(div21, t24);
			append_dev(div29, t25);
			append_dev(div29, div25);
			append_dev(div25, div23);
			append_dev(div23, t26);
			append_dev(div25, t27);
			append_dev(div25, div24);
			if_block4.m(div24, null);
			append_dev(div24, t28);
			append_dev(div24, t29);
			append_dev(div29, t30);
			append_dev(div29, div28);
			append_dev(div28, div26);
			append_dev(div26, t31);
			append_dev(div28, t32);
			append_dev(div28, div27);
			if_block5.m(div27, null);
			append_dev(div27, t33);
			append_dev(div27, t34);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$character*/ 4 && t0_value !== (t0_value = /*$character*/ ctx[2].health.head.name + "")) set_data_dev(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div1, t2);
				}
			}

			if (dirty & /*$character*/ 4 && t3_value !== (t3_value = /*$character*/ ctx[2].health.head.score + "")) set_data_dev(t3, t3_value);
			if (dirty & /*$character*/ 4 && t5_value !== (t5_value = /*$character*/ ctx[2].health.leftArm.name + "")) set_data_dev(t5, t5_value);

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div4, t7);
				}
			}

			if (dirty & /*$character*/ 4 && t8_value !== (t8_value = /*$character*/ ctx[2].health.leftArm.score + "")) set_data_dev(t8, t8_value);
			if (dirty & /*$character*/ 4 && t10_value !== (t10_value = /*$character*/ ctx[2].health.leftLeg.name + "")) set_data_dev(t10, t10_value);

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_2(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div7, t12);
				}
			}

			if (dirty & /*$character*/ 4 && t13_value !== (t13_value = /*$character*/ ctx[2].health.leftLeg.score + "")) set_data_dev(t13, t13_value);
			if (dirty & /*$character*/ 4 && t21_value !== (t21_value = /*$character*/ ctx[2].health.torso.name + "")) set_data_dev(t21, t21_value);

			if (current_block_type_3 === (current_block_type_3 = select_block_type_3(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_3(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div21, t23);
				}
			}

			if (dirty & /*$character*/ 4 && t24_value !== (t24_value = /*$character*/ ctx[2].health.torso.score + "")) set_data_dev(t24, t24_value);
			if (dirty & /*$character*/ 4 && t26_value !== (t26_value = /*$character*/ ctx[2].health.rightArm.name + "")) set_data_dev(t26, t26_value);

			if (current_block_type_4 === (current_block_type_4 = select_block_type_4(ctx)) && if_block4) {
				if_block4.p(ctx, dirty);
			} else {
				if_block4.d(1);
				if_block4 = current_block_type_4(ctx);

				if (if_block4) {
					if_block4.c();
					if_block4.m(div24, t28);
				}
			}

			if (dirty & /*$character*/ 4 && t29_value !== (t29_value = /*$character*/ ctx[2].health.rightArm.score + "")) set_data_dev(t29, t29_value);
			if (dirty & /*$character*/ 4 && t31_value !== (t31_value = /*$character*/ ctx[2].health.rightLeg.name + "")) set_data_dev(t31, t31_value);

			if (current_block_type_5 === (current_block_type_5 = select_block_type_5(ctx)) && if_block5) {
				if_block5.p(ctx, dirty);
			} else {
				if_block5.d(1);
				if_block5 = current_block_type_5(ctx);

				if (if_block5) {
					if_block5.c();
					if_block5.m(div27, t33);
				}
			}

			if (dirty & /*$character*/ 4 && t34_value !== (t34_value = /*$character*/ ctx[2].health.rightLeg.score + "")) set_data_dev(t34, t34_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div30);
			if_block0.d();
			if_block1.d();
			if_block2.d();
			if_block3.d();
			if_block4.d();
			if_block5.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $character,
		$$unsubscribe_character = noop,
		$$subscribe_character = () => ($$unsubscribe_character(), $$unsubscribe_character = subscribe(character, $$value => $$invalidate(2, $character = $$value)), character);

	$$self.$$.on_destroy.push(() => $$unsubscribe_character());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("BodyParts", slots, []);
	let { character } = $$props, { mode } = $$props;
	validate_store(character, "character");
	$$subscribe_character();
	const writable_props = ["character", "mode"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BodyParts> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		$character.health.head.current = to_number(this.value);
		character.set($character);
	}

	function input_input_handler_1() {
		$character.health.leftArm.current = to_number(this.value);
		character.set($character);
	}

	function input_input_handler_2() {
		$character.health.leftLeg.current = to_number(this.value);
		character.set($character);
	}

	function input_input_handler_3() {
		$character.health.torso.current = to_number(this.value);
		character.set($character);
	}

	function input_input_handler_4() {
		$character.health.rightArm.current = to_number(this.value);
		character.set($character);
	}

	function input_input_handler_5() {
		$character.health.rightLeg.current = to_number(this.value);
		character.set($character);
	}

	$$self.$$set = $$props => {
		if ("character" in $$props) $$subscribe_character($$invalidate(0, character = $$props.character));
		if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	};

	$$self.$capture_state = () => ({ character, mode, $character });

	$$self.$inject_state = $$props => {
		if ("character" in $$props) $$subscribe_character($$invalidate(0, character = $$props.character));
		if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		character,
		mode,
		$character,
		input_input_handler,
		input_input_handler_1,
		input_input_handler_2,
		input_input_handler_3,
		input_input_handler_4,
		input_input_handler_5
	];
}

class BodyParts extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { character: 0, mode: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BodyParts",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*character*/ ctx[0] === undefined && !("character" in props)) {
			console.warn("<BodyParts> was created without expected prop 'character'");
		}

		if (/*mode*/ ctx[1] === undefined && !("mode" in props)) {
			console.warn("<BodyParts> was created without expected prop 'mode'");
		}
	}

	get character() {
		throw new Error("<BodyParts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set character(value) {
		throw new Error("<BodyParts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mode() {
		throw new Error("<BodyParts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mode(value) {
		throw new Error("<BodyParts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/character/creator/properties.svelte generated by Svelte v3.29.0 */
const file$1 = "src/routes/character/creator/properties.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (16:1) {#each Properties.explanation as line}
function create_each_block_1(ctx) {
	let p;
	let t_value = /*line*/ ctx[4] + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$1, 16, 2, 481);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(16:1) {#each Properties.explanation as line}",
		ctx
	});

	return block;
}

// (29:4) {:else}
function create_else_block$1(ctx) {
	let li;
	let t_value = /*property*/ ctx[1].desc[0] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file$1, 29, 5, 846);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(29:4) {:else}",
		ctx
	});

	return block;
}

// (26:4) {#if property.name == 'Health'}
function create_if_block$1(ctx) {
	let li0;
	let t0_value = /*property*/ ctx[1].desc[0] + "";
	let t0;
	let t1;
	let li1;
	let t2_value = /*property*/ ctx[1].desc[1] + "";
	let t2;

	const block = {
		c: function create() {
			li0 = element("li");
			t0 = text(t0_value);
			t1 = space();
			li1 = element("li");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			li0 = claim_element(nodes, "LI", {});
			var li0_nodes = children(li0);
			t0 = claim_text(li0_nodes, t0_value);
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			li1 = claim_element(nodes, "LI", {});
			var li1_nodes = children(li1);
			t2 = claim_text(li1_nodes, t2_value);
			li1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li0, file$1, 26, 5, 768);
			add_location(li1, file$1, 27, 5, 801);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li0, anchor);
			append_dev(li0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, li1, anchor);
			append_dev(li1, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(li1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(26:4) {#if property.name == 'Health'}",
		ctx
	});

	return block;
}

// (25:3) {#each Properties.list as property}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*property*/ ctx[1].name == "Health") return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(25:3) {#each Properties.list as property}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div0;
	let t3;
	let p;
	let t4;
	let t5;
	let details;
	let summary;
	let t6;
	let t7;
	let div1;
	let ul;
	let t8;
	let div12;
	let div6;
	let div2;
	let t9_value = /*$character*/ ctx[0].props.speed.name + "";
	let t9;
	let t10;
	let t11_value = /*$character*/ ctx[0].props.speed.score + "";
	let t11;
	let t12;
	let div3;
	let t13_value = /*$character*/ ctx[0].props.experience.name + "";
	let t13;
	let t14;
	let t15_value = /*$character*/ ctx[0].props.experience.score + "";
	let t15;
	let t16;
	let div4;
	let t17_value = /*$character*/ ctx[0].props.carry.name + "";
	let t17;
	let t18;
	let t19_value = /*$character*/ ctx[0].props.carry.score + "";
	let t19;
	let t20;
	let div5;
	let t21_value = /*$character*/ ctx[0].props.psyche.name + "";
	let t21;
	let t22;
	let t23_value = /*$character*/ ctx[0].props.psyche.score + "";
	let t23;
	let t24;
	let div11;
	let div7;
	let t25_value = /*$character*/ ctx[0].props.dodge.name + "";
	let t25;
	let t26;
	let t27_value = /*$character*/ ctx[0].props.dodge.score + "";
	let t27;
	let t28;
	let div8;
	let t29_value = /*$character*/ ctx[0].props.intellect.name + "";
	let t29;
	let t30;
	let t31_value = /*$character*/ ctx[0].props.intellect.score + "";
	let t31;
	let t32;
	let div9;
	let t33_value = /*$character*/ ctx[0].props.block.name + "";
	let t33;
	let t34;
	let t35_value = /*$character*/ ctx[0].props.block.score + "";
	let t35;
	let t36;
	let div10;
	let t37_value = /*$character*/ ctx[0].props.luck.name + "";
	let t37;
	let t38;
	let t39_value = /*$character*/ ctx[0].props.luck.score + "";
	let t39;
	let t40;
	let div13;
	let bodyparts;
	let current;
	let each_value_1 = Properties.explanation;
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Properties.list;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	bodyparts = new BodyParts({
			props: { character, readonly: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Properties");
			t2 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			p = element("p");
			t4 = text("Your Character's Properties are calculated automatically:");
			t5 = space();
			details = element("details");
			summary = element("summary");
			t6 = text("Properties Formulae");
			t7 = space();
			div1 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			div12 = element("div");
			div6 = element("div");
			div2 = element("div");
			t9 = text(t9_value);
			t10 = text(": \n\t\t\t");
			t11 = text(t11_value);
			t12 = space();
			div3 = element("div");
			t13 = text(t13_value);
			t14 = text(": \n\t\t\t");
			t15 = text(t15_value);
			t16 = space();
			div4 = element("div");
			t17 = text(t17_value);
			t18 = text(":\n\t\t\t");
			t19 = text(t19_value);
			t20 = space();
			div5 = element("div");
			t21 = text(t21_value);
			t22 = text(": \n\t\t\t");
			t23 = text(t23_value);
			t24 = space();
			div11 = element("div");
			div7 = element("div");
			t25 = text(t25_value);
			t26 = text(": \n\t\t\t");
			t27 = text(t27_value);
			t28 = space();
			div8 = element("div");
			t29 = text(t29_value);
			t30 = text(": \n\t\t\t");
			t31 = text(t31_value);
			t32 = space();
			div9 = element("div");
			t33 = text(t33_value);
			t34 = text(": \n\t\t\t");
			t35 = text(t35_value);
			t36 = space();
			div10 = element("div");
			t37 = text(t37_value);
			t38 = text(": \n\t\t\t");
			t39 = text(t39_value);
			t40 = space();
			div13 = element("div");
			create_component(bodyparts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-zffn46\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Properties");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div0_nodes);
			}

			t3 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "Your Character's Properties are calculated automatically:");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			details = claim_element(nodes, "DETAILS", { class: true });
			var details_nodes = children(details);
			summary = claim_element(details_nodes, "SUMMARY", {});
			var summary_nodes = children(summary);
			t6 = claim_text(summary_nodes, "Properties Formulae");
			summary_nodes.forEach(detach_dev);
			t7 = claim_space(details_nodes);
			div1 = claim_element(details_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			ul = claim_element(div1_nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			details_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			div12 = claim_element(nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div6 = claim_element(div12_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t9 = claim_text(div2_nodes, t9_value);
			t10 = claim_text(div2_nodes, ": \n\t\t\t");
			t11 = claim_text(div2_nodes, t11_value);
			div2_nodes.forEach(detach_dev);
			t12 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t13 = claim_text(div3_nodes, t13_value);
			t14 = claim_text(div3_nodes, ": \n\t\t\t");
			t15 = claim_text(div3_nodes, t15_value);
			div3_nodes.forEach(detach_dev);
			t16 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t17 = claim_text(div4_nodes, t17_value);
			t18 = claim_text(div4_nodes, ":\n\t\t\t");
			t19 = claim_text(div4_nodes, t19_value);
			div4_nodes.forEach(detach_dev);
			t20 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t21 = claim_text(div5_nodes, t21_value);
			t22 = claim_text(div5_nodes, ": \n\t\t\t");
			t23 = claim_text(div5_nodes, t23_value);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t24 = claim_space(div12_nodes);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div7 = claim_element(div11_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			t25 = claim_text(div7_nodes, t25_value);
			t26 = claim_text(div7_nodes, ": \n\t\t\t");
			t27 = claim_text(div7_nodes, t27_value);
			div7_nodes.forEach(detach_dev);
			t28 = claim_space(div11_nodes);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			t29 = claim_text(div8_nodes, t29_value);
			t30 = claim_text(div8_nodes, ": \n\t\t\t");
			t31 = claim_text(div8_nodes, t31_value);
			div8_nodes.forEach(detach_dev);
			t32 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			t33 = claim_text(div9_nodes, t33_value);
			t34 = claim_text(div9_nodes, ": \n\t\t\t");
			t35 = claim_text(div9_nodes, t35_value);
			div9_nodes.forEach(detach_dev);
			t36 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			t37 = claim_text(div10_nodes, t37_value);
			t38 = claim_text(div10_nodes, ": \n\t\t\t");
			t39 = claim_text(div10_nodes, t39_value);
			div10_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			div12_nodes.forEach(detach_dev);
			t40 = claim_space(nodes);
			div13 = claim_element(nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			claim_component(bodyparts.$$.fragment, div13_nodes);
			div13_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Apocalyptia Online - Character Creator - Properties";
			add_location(h1, file$1, 13, 0, 393);
			add_location(p, file$1, 18, 1, 505);
			attr_dev(div0, "class", "explanation");
			add_location(div0, file$1, 14, 0, 413);
			add_location(summary, file$1, 21, 1, 613);
			add_location(ul, file$1, 23, 2, 683);
			attr_dev(div1, "class", "formulae-card svelte-1q6k0ne");
			add_location(div1, file$1, 22, 1, 653);
			attr_dev(details, "class", "formulae-details svelte-1q6k0ne");
			add_location(details, file$1, 20, 0, 577);
			attr_dev(div2, "class", "prop-item svelte-1q6k0ne");
			add_location(div2, file$1, 37, 2, 996);
			attr_dev(div3, "class", "prop-item svelte-1q6k0ne");
			add_location(div3, file$1, 41, 2, 1100);
			attr_dev(div4, "class", "prop-item svelte-1q6k0ne");
			add_location(div4, file$1, 45, 2, 1214);
			attr_dev(div5, "class", "prop-item svelte-1q6k0ne");
			add_location(div5, file$1, 49, 2, 1317);
			attr_dev(div6, "class", "section-block");
			add_location(div6, file$1, 36, 1, 966);
			attr_dev(div7, "class", "prop-item svelte-1q6k0ne");
			add_location(div7, file$1, 55, 2, 1460);
			attr_dev(div8, "class", "prop-item svelte-1q6k0ne");
			add_location(div8, file$1, 59, 2, 1564);
			attr_dev(div9, "class", "prop-item svelte-1q6k0ne");
			add_location(div9, file$1, 63, 2, 1676);
			attr_dev(div10, "class", "prop-item svelte-1q6k0ne");
			add_location(div10, file$1, 67, 2, 1780);
			attr_dev(div11, "class", "section-block");
			add_location(div11, file$1, 54, 1, 1430);
			attr_dev(div12, "class", "section-card properties-list svelte-1q6k0ne");
			add_location(div12, file$1, 35, 0, 922);
			attr_dev(div13, "class", "section-card");
			add_location(div13, file$1, 73, 0, 1895);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append_dev(div0, t3);
			append_dev(div0, p);
			append_dev(p, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, details, anchor);
			append_dev(details, summary);
			append_dev(summary, t6);
			append_dev(details, t7);
			append_dev(details, div1);
			append_dev(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_dev(target, t8, anchor);
			insert_dev(target, div12, anchor);
			append_dev(div12, div6);
			append_dev(div6, div2);
			append_dev(div2, t9);
			append_dev(div2, t10);
			append_dev(div2, t11);
			append_dev(div6, t12);
			append_dev(div6, div3);
			append_dev(div3, t13);
			append_dev(div3, t14);
			append_dev(div3, t15);
			append_dev(div6, t16);
			append_dev(div6, div4);
			append_dev(div4, t17);
			append_dev(div4, t18);
			append_dev(div4, t19);
			append_dev(div6, t20);
			append_dev(div6, div5);
			append_dev(div5, t21);
			append_dev(div5, t22);
			append_dev(div5, t23);
			append_dev(div12, t24);
			append_dev(div12, div11);
			append_dev(div11, div7);
			append_dev(div7, t25);
			append_dev(div7, t26);
			append_dev(div7, t27);
			append_dev(div11, t28);
			append_dev(div11, div8);
			append_dev(div8, t29);
			append_dev(div8, t30);
			append_dev(div8, t31);
			append_dev(div11, t32);
			append_dev(div11, div9);
			append_dev(div9, t33);
			append_dev(div9, t34);
			append_dev(div9, t35);
			append_dev(div11, t36);
			append_dev(div11, div10);
			append_dev(div10, t37);
			append_dev(div10, t38);
			append_dev(div10, t39);
			insert_dev(target, t40, anchor);
			insert_dev(target, div13, anchor);
			mount_component(bodyparts, div13, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*Properties*/ 0) {
				each_value_1 = Properties.explanation;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, t3);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*Properties*/ 0) {
				each_value = Properties.list;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if ((!current || dirty & /*$character*/ 1) && t9_value !== (t9_value = /*$character*/ ctx[0].props.speed.name + "")) set_data_dev(t9, t9_value);
			if ((!current || dirty & /*$character*/ 1) && t11_value !== (t11_value = /*$character*/ ctx[0].props.speed.score + "")) set_data_dev(t11, t11_value);
			if ((!current || dirty & /*$character*/ 1) && t13_value !== (t13_value = /*$character*/ ctx[0].props.experience.name + "")) set_data_dev(t13, t13_value);
			if ((!current || dirty & /*$character*/ 1) && t15_value !== (t15_value = /*$character*/ ctx[0].props.experience.score + "")) set_data_dev(t15, t15_value);
			if ((!current || dirty & /*$character*/ 1) && t17_value !== (t17_value = /*$character*/ ctx[0].props.carry.name + "")) set_data_dev(t17, t17_value);
			if ((!current || dirty & /*$character*/ 1) && t19_value !== (t19_value = /*$character*/ ctx[0].props.carry.score + "")) set_data_dev(t19, t19_value);
			if ((!current || dirty & /*$character*/ 1) && t21_value !== (t21_value = /*$character*/ ctx[0].props.psyche.name + "")) set_data_dev(t21, t21_value);
			if ((!current || dirty & /*$character*/ 1) && t23_value !== (t23_value = /*$character*/ ctx[0].props.psyche.score + "")) set_data_dev(t23, t23_value);
			if ((!current || dirty & /*$character*/ 1) && t25_value !== (t25_value = /*$character*/ ctx[0].props.dodge.name + "")) set_data_dev(t25, t25_value);
			if ((!current || dirty & /*$character*/ 1) && t27_value !== (t27_value = /*$character*/ ctx[0].props.dodge.score + "")) set_data_dev(t27, t27_value);
			if ((!current || dirty & /*$character*/ 1) && t29_value !== (t29_value = /*$character*/ ctx[0].props.intellect.name + "")) set_data_dev(t29, t29_value);
			if ((!current || dirty & /*$character*/ 1) && t31_value !== (t31_value = /*$character*/ ctx[0].props.intellect.score + "")) set_data_dev(t31, t31_value);
			if ((!current || dirty & /*$character*/ 1) && t33_value !== (t33_value = /*$character*/ ctx[0].props.block.name + "")) set_data_dev(t33, t33_value);
			if ((!current || dirty & /*$character*/ 1) && t35_value !== (t35_value = /*$character*/ ctx[0].props.block.score + "")) set_data_dev(t35, t35_value);
			if ((!current || dirty & /*$character*/ 1) && t37_value !== (t37_value = /*$character*/ ctx[0].props.luck.name + "")) set_data_dev(t37, t37_value);
			if ((!current || dirty & /*$character*/ 1) && t39_value !== (t39_value = /*$character*/ ctx[0].props.luck.score + "")) set_data_dev(t39, t39_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(bodyparts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bodyparts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(details);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(div12);
			if (detaching) detach_dev(t40);
			if (detaching) detach_dev(div13);
			destroy_component(bodyparts);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $character;
	validate_store(character, "character");
	component_subscribe($$self, character, $$value => $$invalidate(0, $character = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Properties", slots, []);
	beforeUpdate(_ => set_store_value(character, $character = Properties.setScores($character), $character));
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Properties> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		BodyParts,
		Properties,
		beforeUpdate,
		character,
		$character
	});

	return [$character];
}

class Properties_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Properties_1",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Properties_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy44ZTBmNTJjNS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvY2hhcmFjdGVyL0JvZHlQYXJ0cy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2NoYXJhY3Rlci9jcmVhdG9yL3Byb3BlcnRpZXMuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgY2hhcmFjdGVyLCBtb2RlXG48L3NjcmlwdD5cblxuXG48ZGl2IGNsYXNzPSdib2R5LXBhcnRzLXNlY3Rpb24nPlxuXHQ8ZGl2IGNsYXNzPSdsZWZ0LWNvbHVtbic+XG5cdFx0PGRpdiBjbGFzcz0naGVhZC1sYWJlbCc+XG5cdFx0XHQ8ZGl2IGNsYXNzPSdib2R5LXBhcnQtbmFtZSc+XG5cdFx0XHRcdHskY2hhcmFjdGVyLmhlYWx0aC5oZWFkLm5hbWV9XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9J2JvZHktcGFydC1udW1iZXJzJz5cblx0XHRcdFx0eyNpZiBtb2RlID09ICdyZWFkb25seSd9XG5cdFx0XHRcdFx0eyRjaGFyYWN0ZXIuaGVhbHRoLmhlYWQuc2NvcmV9XG5cdFx0XHRcdHs6ZWxzZX1cblx0XHRcdFx0XHQ8aW5wdXQgdHlwZT0nbnVtYmVyJ1xuXHRcdFx0XHRcdFx0YmluZDp2YWx1ZT0neyRjaGFyYWN0ZXIuaGVhbHRoLmhlYWQuY3VycmVudH0nXG5cdFx0XHRcdFx0XHRtaW49Jy17JGNoYXJhY3Rlci5oZWFsdGguaGVhZC5zY29yZX0nXG5cdFx0XHRcdFx0XHRtYXg9J3skY2hhcmFjdGVyLmhlYWx0aC5oZWFkLnNjb3JlfSdcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHR7L2lmfSAvIHskY2hhcmFjdGVyLmhlYWx0aC5oZWFkLnNjb3JlfVxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz0nbGVmdC1hcm0tbGFiZWwnPlxuXHRcdFx0PGRpdiBjbGFzcz0nYm9keS1wYXJ0LW5hbWUnPlxuXHRcdFx0XHR7JGNoYXJhY3Rlci5oZWFsdGgubGVmdEFybS5uYW1lfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPSdib2R5LXBhcnQtbnVtYmVycyc+XG5cdFx0XHRcdHsjaWYgbW9kZSA9PSAncmVhZG9ubHknfVxuXHRcdFx0XHRcdHskY2hhcmFjdGVyLmhlYWx0aC5sZWZ0QXJtLnNjb3JlfVxuXHRcdFx0XHR7OmVsc2V9XG5cdFx0XHRcdFx0PGlucHV0IHR5cGU9J251bWJlcidcblx0XHRcdFx0XHRcdGJpbmQ6dmFsdWU9J3skY2hhcmFjdGVyLmhlYWx0aC5sZWZ0QXJtLmN1cnJlbnR9J1xuXHRcdFx0XHRcdFx0bWluPScteyRjaGFyYWN0ZXIuaGVhbHRoLmxlZnRBcm0uc2NvcmV9J1xuXHRcdFx0XHRcdFx0bWF4PSd7JGNoYXJhY3Rlci5oZWFsdGgubGVmdEFybS5zY29yZX0nXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0ey9pZn0gLyB7JGNoYXJhY3Rlci5oZWFsdGgubGVmdEFybS5zY29yZX1cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J2xlZnQtbGVnLWxhYmVsJz5cblx0XHRcdDxkaXYgY2xhc3M9J2JvZHktcGFydC1uYW1lJz5cblx0XHRcdFx0eyRjaGFyYWN0ZXIuaGVhbHRoLmxlZnRMZWcubmFtZX1cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz0nYm9keS1wYXJ0LW51bWJlcnMnPlxuXHRcdFx0XHR7I2lmIG1vZGUgPT0gJ3JlYWRvbmx5J31cblx0XHRcdFx0XHR7JGNoYXJhY3Rlci5oZWFsdGgubGVmdExlZy5zY29yZX1cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRcdDxpbnB1dCB0eXBlPSdudW1iZXInXG5cdFx0XHRcdFx0XHRiaW5kOnZhbHVlPSd7JGNoYXJhY3Rlci5oZWFsdGgubGVmdExlZy5jdXJyZW50fSdcblx0XHRcdFx0XHRcdG1pbj0nLXskY2hhcmFjdGVyLmhlYWx0aC5sZWZ0TGVnLnNjb3JlfSdcblx0XHRcdFx0XHRcdG1heD0neyRjaGFyYWN0ZXIuaGVhbHRoLmxlZnRMZWcuc2NvcmV9J1xuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdHsvaWZ9IC8geyRjaGFyYWN0ZXIuaGVhbHRoLmxlZnRMZWcuc2NvcmV9XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9J2NlbnRlci1jb2x1bW4nPlxuXHRcdDxkaXYgY2xhc3M9J2hlYWQtbGV2ZWwnPlxuXHRcdFx0PGRpdiBjbGFzcz0naGVhZCBib2R5LXBhcnQnIC8+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz0ndG9yc28tbGV2ZWwnPlxuXHRcdFx0PGRpdiBjbGFzcz0nbGVmdC1hcm0gYXJtIGJvZHktcGFydCcgLz5cblx0XHRcdDxkaXYgY2xhc3M9J3RvcnNvIGJvZHktcGFydCcgLz5cblx0XHRcdDxkaXYgY2xhc3M9J3JpZ2h0LWFybSBhcm0gYm9keS1wYXJ0JyAvPlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J2xlZ3MtbGV2ZWwnPlxuXHRcdFx0PGRpdiBjbGFzcz0nbGVmdC1sZWcgbGVnIGJvZHktcGFydCcgLz5cblx0XHRcdDxkaXYgY2xhc3M9J3JpZ2h0LWxlZyBsZWcgYm9keS1wYXJ0JyAvPlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz0ncmlnaHQtY29sdW1uJz5cblx0XHQ8ZGl2IGNsYXNzPSd0b3Jzby1sYWJlbCc+XG5cdFx0XHQ8ZGl2IGNsYXNzPSdib2R5LXBhcnQtbmFtZSc+XG5cdFx0XHRcdHskY2hhcmFjdGVyLmhlYWx0aC50b3Jzby5uYW1lfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPSdib2R5LXBhcnQtbnVtYmVycyc+XG5cdFx0XHRcdHsjaWYgbW9kZSA9PSAncmVhZG9ubHknfVxuXHRcdFx0XHRcdHskY2hhcmFjdGVyLmhlYWx0aC50b3Jzby5zY29yZX1cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRcdDxpbnB1dCB0eXBlPSdudW1iZXInXG5cdFx0XHRcdFx0XHRiaW5kOnZhbHVlPSd7JGNoYXJhY3Rlci5oZWFsdGgudG9yc28uY3VycmVudH0nXG5cdFx0XHRcdFx0XHRtaW49Jy17JGNoYXJhY3Rlci5oZWFsdGgudG9yc28uc2NvcmV9J1xuXHRcdFx0XHRcdFx0bWF4PSd7JGNoYXJhY3Rlci5oZWFsdGgudG9yc28uc2NvcmV9J1xuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdHsvaWZ9IC8geyRjaGFyYWN0ZXIuaGVhbHRoLnRvcnNvLnNjb3JlfVxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz0ncmlnaHQtYXJtLWxhYmVsJz5cblx0XHRcdDxkaXYgY2xhc3M9J2JvZHktcGFydC1uYW1lJz5cblx0XHRcdFx0eyRjaGFyYWN0ZXIuaGVhbHRoLnJpZ2h0QXJtLm5hbWV9XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9J2JvZHktcGFydC1udW1iZXJzJz5cblx0XHRcdFx0eyNpZiBtb2RlID09ICdyZWFkb25seSd9XG5cdFx0XHRcdFx0eyRjaGFyYWN0ZXIuaGVhbHRoLnJpZ2h0QXJtLnNjb3JlfVxuXHRcdFx0XHR7OmVsc2V9XG5cdFx0XHRcdFx0PGlucHV0IHR5cGU9J251bWJlcidcblx0XHRcdFx0XHRcdGJpbmQ6dmFsdWU9J3skY2hhcmFjdGVyLmhlYWx0aC5yaWdodEFybS5jdXJyZW50fSdcblx0XHRcdFx0XHRcdG1pbj0nLXskY2hhcmFjdGVyLmhlYWx0aC5yaWdodEFybS5zY29yZX0nXG5cdFx0XHRcdFx0XHRtYXg9J3skY2hhcmFjdGVyLmhlYWx0aC5yaWdodEFybS5zY29yZX0nXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0ey9pZn0gLyB7JGNoYXJhY3Rlci5oZWFsdGgucmlnaHRBcm0uc2NvcmV9XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPSdyaWdodC1sZWctbGFiZWwnPlxuXHRcdFx0PGRpdiBjbGFzcz0nYm9keS1wYXJ0LW5hbWUnPlxuXHRcdFx0XHR7JGNoYXJhY3Rlci5oZWFsdGgucmlnaHRMZWcubmFtZX1cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz0nYm9keS1wYXJ0LW51bWJlcnMnPlxuXHRcdFx0XHR7I2lmIG1vZGUgPT0gJ3JlYWRvbmx5J31cblx0XHRcdFx0XHR7JGNoYXJhY3Rlci5oZWFsdGgucmlnaHRMZWcuc2NvcmV9XG5cdFx0XHRcdHs6ZWxzZX1cblx0XHRcdFx0XHQ8aW5wdXQgdHlwZT0nbnVtYmVyJ1xuXHRcdFx0XHRcdFx0YmluZDp2YWx1ZT0neyRjaGFyYWN0ZXIuaGVhbHRoLnJpZ2h0TGVnLmN1cnJlbnR9J1xuXHRcdFx0XHRcdFx0bWluPScteyRjaGFyYWN0ZXIuaGVhbHRoLnJpZ2h0TGVnLnNjb3JlfSdcblx0XHRcdFx0XHRcdG1heD0neyRjaGFyYWN0ZXIuaGVhbHRoLnJpZ2h0TGVnLnNjb3JlfSdcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHR7L2lmfSAvIHskY2hhcmFjdGVyLmhlYWx0aC5yaWdodExlZy5zY29yZX1cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuXG5cbjxzdHlsZT5cblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10ge1xuXHRcdHdpZHRoOiB2YXIoLS1zMjAwKTtcblx0fVxuXHQuYm9keS1wYXJ0cy1zZWN0aW9uIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdG1heC13aWR0aDogMTAwJTtcblx0fVxuXHRkaXZbY2xhc3MqPWNvbHVtbl0ge1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHR3aWR0aDogYXV0bztcblx0fVxuXHQuY2VudGVyLWNvbHVtbiB7XG5cdFx0bWFyZ2luLXRvcDogMTBweDtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cblx0ZGl2W2NsYXNzKj0tbGFiZWxdIHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0aGVpZ2h0OiAxMHB4O1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cblx0LmhlYWQtbGFiZWwsIC50b3Jzby1sYWJlbCB7XG5cdFx0dG9wOiAzMHB4O1xuXHR9XG5cdC5sZWZ0LWFybS1sYWJlbCwgLnJpZ2h0LWFybS1sYWJlbCB7XG5cdFx0dG9wOiAxMjBweDtcblx0fVxuXHQubGVmdC1sZWctbGFiZWwsIC5yaWdodC1sZWctbGFiZWwge1xuXHRcdHRvcDogMjEwcHg7XG5cdH1cblx0LmJvZHktcGFydCB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogbGltZTtcblx0fVxuXHQuYm9keS1wYXJ0LW51bWJlcnMge1xuXHRcdG1hcmdpbjogNXB4O1xuXHR9XG5cdGRpdltjbGFzcyo9bGV2ZWxdIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHR9XG5cdC5oZWFkIHtcblx0XHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdFx0Ym9yZGVyOiAxcHg7XG5cdFx0aGVpZ2h0OiA1MHB4O1xuXHRcdG1hcmdpbi1ib3R0b206IDVweDtcblx0XHR3aWR0aDogNTBweDtcblx0fVxuXHQuYXJtIHtcblx0XHRib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxNXB4O1xuXHRcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxNXB4O1xuXHRcdGhlaWdodDogMTQwcHg7XG5cdFx0d2lkdGg6IDIwcHg7XG5cdH1cblx0LmxlZnQtYXJtIHtcblx0XHRib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzMHB4O1xuXHR9XG5cdC5yaWdodC1hcm0ge1xuXHRcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzMHB4O1xuXHR9XG5cdC50b3JzbyB7XG5cdFx0Y29sb3I6IHJnYmEoMTUsIDMwLCAxNSwgMSk7XG5cdFx0aGVpZ2h0OiAxNTBweDtcblx0XHRtYXJnaW46IDAgNXB4O1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHR3aWR0aDogNzBweDtcblx0fVxuXHQubGVnIHtcblx0XHRib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMTVweDtcblx0XHRib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxNXB4O1xuXHRcdGhlaWdodDogMTYwcHg7XG5cdFx0d2lkdGg6IDI4cHg7XG5cdH1cblx0LmxlZnQtbGVnIHtcblx0XHRtYXJnaW4tcmlnaHQ6IDE0cHg7XG5cdH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IEJvZHlQYXJ0cyBmcm9tICd2aWV3cy9jaGFyYWN0ZXIvQm9keVBhcnRzLnN2ZWx0ZSdcblx0aW1wb3J0IFByb3BlcnRpZXMgZnJvbSAncnVsZXMvcHJvcGVydGllcy9Qcm9wZXJ0aWVzLmpzJ1xuXHRpbXBvcnQgeyBiZWZvcmVVcGRhdGUgfSBmcm9tICdzdmVsdGUnXG5cdGltcG9ydCB7IGNoYXJhY3RlciB9IGZyb20gJ3N0b3Jlcy9jaGFyYWN0ZXJTdG9yZS5qcydcblxuXHRiZWZvcmVVcGRhdGUoXyA9PiAkY2hhcmFjdGVyID0gUHJvcGVydGllcy5zZXRTY29yZXMoJGNoYXJhY3RlcikpXG48L3NjcmlwdD5cblxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5BcG9jYWx5cHRpYSBPbmxpbmUgLSBDaGFyYWN0ZXIgQ3JlYXRvciAtIFByb3BlcnRpZXM8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxoMT5Qcm9wZXJ0aWVzPC9oMT5cbjxkaXYgY2xhc3M9J2V4cGxhbmF0aW9uJz5cblx0eyNlYWNoIFByb3BlcnRpZXMuZXhwbGFuYXRpb24gYXMgbGluZX1cblx0XHQ8cD57bGluZX08L3A+XG5cdHsvZWFjaH1cblx0PHA+WW91ciBDaGFyYWN0ZXIncyBQcm9wZXJ0aWVzIGFyZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHk6PC9wPlxuPC9kaXY+XG48ZGV0YWlscyBjbGFzcz0nZm9ybXVsYWUtZGV0YWlscyc+XG5cdDxzdW1tYXJ5PlByb3BlcnRpZXMgRm9ybXVsYWU8L3N1bW1hcnk+XG5cdDxkaXYgY2xhc3M9J2Zvcm11bGFlLWNhcmQnPlxuXHRcdDx1bD5cblx0XHRcdHsjZWFjaCBQcm9wZXJ0aWVzLmxpc3QgYXMgcHJvcGVydHl9XG5cdFx0XHRcdHsjaWYgcHJvcGVydHkubmFtZSA9PSAnSGVhbHRoJ31cblx0XHRcdFx0XHQ8bGk+e3Byb3BlcnR5LmRlc2NbMF19PC9saT5cblx0XHRcdFx0XHQ8bGk+e3Byb3BlcnR5LmRlc2NbMV19PC9saT5cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRcdDxsaT57cHJvcGVydHkuZGVzY1swXX08L2xpPlxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0ey9lYWNofVxuXHRcdDwvdWw+XG5cdDwvZGl2PlxuPC9kZXRhaWxzPlxuPGRpdiBjbGFzcz0nc2VjdGlvbi1jYXJkIHByb3BlcnRpZXMtbGlzdCc+XG5cdDxkaXYgY2xhc3M9J3NlY3Rpb24tYmxvY2snPlxuXHRcdDxkaXYgY2xhc3M9J3Byb3AtaXRlbSc+XG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5zcGVlZC5uYW1lfTogXG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5zcGVlZC5zY29yZX1cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPSdwcm9wLWl0ZW0nPlxuXHRcdFx0eyRjaGFyYWN0ZXIucHJvcHMuZXhwZXJpZW5jZS5uYW1lfTogXG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5leHBlcmllbmNlLnNjb3JlfVxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J3Byb3AtaXRlbSc+XG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5jYXJyeS5uYW1lfTpcblx0XHRcdHskY2hhcmFjdGVyLnByb3BzLmNhcnJ5LnNjb3JlfVxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J3Byb3AtaXRlbSc+XG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5wc3ljaGUubmFtZX06IFxuXHRcdFx0eyRjaGFyYWN0ZXIucHJvcHMucHN5Y2hlLnNjb3JlfVxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz0nc2VjdGlvbi1ibG9jayc+XG5cdFx0PGRpdiBjbGFzcz0ncHJvcC1pdGVtJz5cblx0XHRcdHskY2hhcmFjdGVyLnByb3BzLmRvZGdlLm5hbWV9OiBcblx0XHRcdHskY2hhcmFjdGVyLnByb3BzLmRvZGdlLnNjb3JlfVxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J3Byb3AtaXRlbSc+XG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5pbnRlbGxlY3QubmFtZX06IFxuXHRcdFx0eyRjaGFyYWN0ZXIucHJvcHMuaW50ZWxsZWN0LnNjb3JlfVxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9J3Byb3AtaXRlbSc+XG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5ibG9jay5uYW1lfTogXG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5ibG9jay5zY29yZX1cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPSdwcm9wLWl0ZW0nPlxuXHRcdFx0eyRjaGFyYWN0ZXIucHJvcHMubHVjay5uYW1lfTogXG5cdFx0XHR7JGNoYXJhY3Rlci5wcm9wcy5sdWNrLnNjb3JlfVxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuPGRpdiBjbGFzcz0nc2VjdGlvbi1jYXJkJz5cblx0PEJvZHlQYXJ0cyB7Y2hhcmFjdGVyfSByZWFkb25seT17dHJ1ZX0vPlxuPC9kaXY+XG5cblxuPHN0eWxlPlxuXHQuZm9ybXVsYWUtZGV0YWlscyB7XG5cdFx0bWFyZ2luOiB2YXIoLS1zMTAwKTtcblx0fVxuXHQuZm9ybXVsYWUtY2FyZCB7XG5cdFx0cGFkZGluZzogdmFyKC0tczEwMCk7XG5cdH1cblx0LnByb3BlcnRpZXMtbGlzdCB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHR9XG5cdC5wcm9wLWl0ZW0ge1xuXHRcdG1hcmdpbjogdmFyKC0tczEwKTtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBw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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBM0Q5QixVQUFVLENBQUMsV0FBVzs7OztpQ0FBM0IsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FBSixNQUFJOzs7O2lCQVNHLFVBQVUsQ0FBQyxJQUFJOzs7OytCQUFwQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozt5RkFjTCxHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJOzJGQUMzQixHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLOzJGQUc1QixHQUFVLElBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJOzJGQUNoQyxHQUFVLElBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLOzJGQUdqQyxHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJOzJGQUMzQixHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLOzJGQUc1QixHQUFVLElBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJOzJGQUM1QixHQUFVLElBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLOzJGQUs3QixHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJOzJGQUMzQixHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLOzJGQUc1QixHQUFVLElBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJOzJGQUMvQixHQUFVLElBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLOzJGQUdoQyxHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJOzJGQUMzQixHQUFVLElBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLOzJGQUc1QixHQUFVLElBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJOzJGQUMxQixHQUFVLElBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EvRDlCLFlBQVksQ0FBQyxDQUFDLCtCQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
