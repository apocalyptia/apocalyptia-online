import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as validate_store, r as component_subscribe, v as validate_slots, Y as beforeUpdate, W as globals, k as space, e as element, t as text, X as empty, x as query_selector_all, f as detach_dev, m as claim_space, a as claim_element, b as children, l as claim_text, h as add_location, g as attr_dev, j as insert_dev, p as append_dev, A as transition_out, B as check_outros, C as transition_in, E as set_store_value, J as validate_each_argument, w as create_component, y as claim_component, z as mount_component, D as destroy_component, F as group_outros, G as listen_dev, n as noop, L as destroy_each } from './client.bef6cb5c.js';
import { c as character } from './characterStore.ff67da4d.js';
import './SWBodyguard.54177d3a.js';
import './StorageList.71288974.js';
import './RangedWeaponList.4703ea51.js';
import { G as GearBlock } from './GearBlock.d1e49fb1.js';
import './RandomRoll.f18d347c.js';
import { R as RandomStartingGear } from './RandomStartingGear.1aaace4b.js';
import './d6.b655a31f.js';

/* src/routes/character/creator/gear.svelte generated by Svelte v3.29.0 */

const { Object: Object_1 } = globals;
const file = "src/routes/character/creator/gear.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (69:0) {:else}
function create_else_block(ctx) {
	let div;
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			t = text("Random");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Random");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "small-cntr-btn");
			add_location(button, file, 70, 2, 1822);
			attr_dev(div, "class", "btn-row");
			add_location(div, file, 69, 1, 1798);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*randomStartingGear*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(69:0) {:else}",
		ctx
	});

	return block;
}

// (26:0) {#if gearedUp}
function create_if_block(ctx) {
	let div2;
	let div0;
	let h20;
	let t0;
	let t1;
	let div1;
	let gearblock0;
	let t2;
	let div5;
	let div3;
	let h21;
	let t3;
	let t4;
	let div4;
	let gearblock1;
	let t5;
	let div8;
	let div6;
	let h22;
	let t6;
	let t7;
	let div7;
	let gearblock2;
	let t8;
	let div11;
	let div9;
	let h23;
	let t9;
	let t10;
	let div10;
	let gearblock3;
	let t11;
	let div13;
	let div12;
	let h24;
	let t12;
	let t13;
	let current;

	gearblock0 = new GearBlock({
			props: {
				item: /*$character*/ ctx[1].gear.melee.inventory[0],
				mode: "edit"
			},
			$$inline: true
		});

	gearblock1 = new GearBlock({
			props: {
				item: /*$character*/ ctx[1].gear.ranged.inventory[0],
				mode: "edit"
			},
			$$inline: true
		});

	gearblock2 = new GearBlock({
			props: {
				item: /*$character*/ ctx[1].gear.ammo.inventory[0],
				mode: "edit"
			},
			$$inline: true
		});

	gearblock3 = new GearBlock({
			props: {
				item: /*$character*/ ctx[1].gear.armor.inventory[0],
				mode: "edit"
			},
			$$inline: true
		});

	let each_value = /*$character*/ ctx[1].gear.equipment.inventory;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			h20 = element("h2");
			t0 = text("Melee Weapon");
			t1 = space();
			div1 = element("div");
			create_component(gearblock0.$$.fragment);
			t2 = space();
			div5 = element("div");
			div3 = element("div");
			h21 = element("h2");
			t3 = text("Ranged Weapon");
			t4 = space();
			div4 = element("div");
			create_component(gearblock1.$$.fragment);
			t5 = space();
			div8 = element("div");
			div6 = element("div");
			h22 = element("h2");
			t6 = text("Ammo");
			t7 = space();
			div7 = element("div");
			create_component(gearblock2.$$.fragment);
			t8 = space();
			div11 = element("div");
			div9 = element("div");
			h23 = element("h2");
			t9 = text("Armor");
			t10 = space();
			div10 = element("div");
			create_component(gearblock3.$$.fragment);
			t11 = space();
			div13 = element("div");
			div12 = element("div");
			h24 = element("h2");
			t12 = text("Equipment");
			t13 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", {});
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Melee Weapon");
			h20_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(gearblock0.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h21 = claim_element(div3_nodes, "H2", {});
			var h21_nodes = children(h21);
			t3 = claim_text(h21_nodes, "Ranged Weapon");
			h21_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t4 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			claim_component(gearblock1.$$.fragment, div4_nodes);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			h22 = claim_element(div6_nodes, "H2", {});
			var h22_nodes = children(h22);
			t6 = claim_text(h22_nodes, "Ammo");
			h22_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t7 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			claim_component(gearblock2.$$.fragment, div7_nodes);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			div11 = claim_element(nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			h23 = claim_element(div9_nodes, "H2", {});
			var h23_nodes = children(h23);
			t9 = claim_text(h23_nodes, "Armor");
			h23_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t10 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			claim_component(gearblock3.$$.fragment, div10_nodes);
			div10_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			div13 = claim_element(nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			h24 = claim_element(div12_nodes, "H2", {});
			var h24_nodes = children(h24);
			t12 = claim_text(h24_nodes, "Equipment");
			h24_nodes.forEach(detach_dev);
			div12_nodes.forEach(detach_dev);
			t13 = claim_space(div13_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div13_nodes);
			}

			div13_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h20, file, 28, 3, 792);
			attr_dev(div0, "class", "item-category svelte-b70j1n");
			add_location(div0, file, 27, 2, 761);
			attr_dev(div1, "class", "item svelte-b70j1n");
			add_location(div1, file, 30, 2, 825);
			attr_dev(div2, "class", "section-card");
			add_location(div2, file, 26, 1, 732);
			add_location(h21, file, 36, 3, 995);
			attr_dev(div3, "class", "item-category svelte-b70j1n");
			add_location(div3, file, 35, 2, 964);
			attr_dev(div4, "class", "item svelte-b70j1n");
			add_location(div4, file, 38, 2, 1029);
			attr_dev(div5, "class", "section-card");
			add_location(div5, file, 34, 1, 935);
			add_location(h22, file, 44, 3, 1213);
			attr_dev(div6, "class", "item-category ammo-heading svelte-b70j1n");
			add_location(div6, file, 43, 2, 1169);
			attr_dev(div7, "class", "item svelte-b70j1n");
			add_location(div7, file, 46, 2, 1238);
			attr_dev(div8, "class", "section-card");
			add_location(div8, file, 42, 1, 1140);
			add_location(h23, file, 52, 3, 1407);
			attr_dev(div9, "class", "item-category svelte-b70j1n");
			add_location(div9, file, 51, 2, 1376);
			attr_dev(div10, "class", "item svelte-b70j1n");
			add_location(div10, file, 54, 2, 1433);
			attr_dev(div11, "class", "section-card");
			add_location(div11, file, 50, 1, 1347);
			add_location(h24, file, 60, 3, 1603);
			attr_dev(div12, "class", "item-category svelte-b70j1n");
			add_location(div12, file, 59, 2, 1572);
			attr_dev(div13, "class", "section-card");
			add_location(div13, file, 58, 1, 1543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, h20);
			append_dev(h20, t0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			mount_component(gearblock0, div1, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div3);
			append_dev(div3, h21);
			append_dev(h21, t3);
			append_dev(div5, t4);
			append_dev(div5, div4);
			mount_component(gearblock1, div4, null);
			insert_dev(target, t5, anchor);
			insert_dev(target, div8, anchor);
			append_dev(div8, div6);
			append_dev(div6, h22);
			append_dev(h22, t6);
			append_dev(div8, t7);
			append_dev(div8, div7);
			mount_component(gearblock2, div7, null);
			insert_dev(target, t8, anchor);
			insert_dev(target, div11, anchor);
			append_dev(div11, div9);
			append_dev(div9, h23);
			append_dev(h23, t9);
			append_dev(div11, t10);
			append_dev(div11, div10);
			mount_component(gearblock3, div10, null);
			insert_dev(target, t11, anchor);
			insert_dev(target, div13, anchor);
			append_dev(div13, div12);
			append_dev(div12, h24);
			append_dev(h24, t12);
			append_dev(div13, t13);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div13, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const gearblock0_changes = {};
			if (dirty & /*$character*/ 2) gearblock0_changes.item = /*$character*/ ctx[1].gear.melee.inventory[0];
			gearblock0.$set(gearblock0_changes);
			const gearblock1_changes = {};
			if (dirty & /*$character*/ 2) gearblock1_changes.item = /*$character*/ ctx[1].gear.ranged.inventory[0];
			gearblock1.$set(gearblock1_changes);
			const gearblock2_changes = {};
			if (dirty & /*$character*/ 2) gearblock2_changes.item = /*$character*/ ctx[1].gear.ammo.inventory[0];
			gearblock2.$set(gearblock2_changes);
			const gearblock3_changes = {};
			if (dirty & /*$character*/ 2) gearblock3_changes.item = /*$character*/ ctx[1].gear.armor.inventory[0];
			gearblock3.$set(gearblock3_changes);

			if (dirty & /*$character*/ 2) {
				each_value = /*$character*/ ctx[1].gear.equipment.inventory;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div13, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(gearblock0.$$.fragment, local);
			transition_in(gearblock1.$$.fragment, local);
			transition_in(gearblock2.$$.fragment, local);
			transition_in(gearblock3.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(gearblock0.$$.fragment, local);
			transition_out(gearblock1.$$.fragment, local);
			transition_out(gearblock2.$$.fragment, local);
			transition_out(gearblock3.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(gearblock0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div5);
			destroy_component(gearblock1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div8);
			destroy_component(gearblock2);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(div11);
			destroy_component(gearblock3);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(div13);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(26:0) {#if gearedUp}",
		ctx
	});

	return block;
}

// (63:2) {#each $character.gear.equipment.inventory as equipment}
function create_each_block(ctx) {
	let div;
	let gearblock;
	let t;
	let current;

	gearblock = new GearBlock({
			props: { item: /*equipment*/ ctx[3], mode: "edit" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(gearblock.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(gearblock.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "item svelte-b70j1n");
			add_location(div, file, 63, 3, 1693);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(gearblock, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const gearblock_changes = {};
			if (dirty & /*$character*/ 2) gearblock_changes.item = /*equipment*/ ctx[3];
			gearblock.$set(gearblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(gearblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(gearblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(gearblock);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(63:2) {#each $character.gear.equipment.inventory as equipment}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div;
	let p;
	let t3;
	let t4;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*gearedUp*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Gear");
			t2 = space();
			div = element("div");
			p = element("p");
			t3 = text("You start with some random Gear: A Melee weapon, a Ranged weapon (with a little Ammo), and Armor.");
			t4 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-18tij7s\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Gear");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "You start with some random Gear: A Melee weapon, a Ranged weapon (with a little Ammo), and Armor.");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Apocalyptia Online - Character Creator - Gear";
			add_location(h1, file, 21, 0, 563);
			add_location(p, file, 23, 1, 604);
			attr_dev(div, "class", "explanation");
			add_location(div, file, 22, 0, 577);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t4);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $character;
	validate_store(character, "character");
	component_subscribe($$self, character, $$value => $$invalidate(1, $character = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Gear", slots, []);
	let gearedUp = false;

	const randomStartingGear = () => {
		set_store_value(character, $character = RandomStartingGear($character, $character.props.luck.score), $character);
	};

	beforeUpdate(_ => {
		$$invalidate(0, gearedUp = Object.values($character.gear).every(g => g.inventory.length));
	});

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Gear> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		GearBlock,
		RandomStartingGear,
		character,
		beforeUpdate,
		gearedUp,
		randomStartingGear,
		$character
	});

	$$self.$inject_state = $$props => {
		if ("gearedUp" in $$props) $$invalidate(0, gearedUp = $$props.gearedUp);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [gearedUp, $character, randomStartingGear];
}

class Gear extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Gear",
			options,
			id: create_fragment.name
		});
	}
}

export default Gear;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2Vhci5lY2RiNzJjMi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9jaGFyYWN0ZXIvY3JlYXRvci9nZWFyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgR2VhckJsb2NrIGZyb20gJ3ZpZXdzL3dpZGdldHMvR2VhckJsb2NrLnN2ZWx0ZSdcblx0aW1wb3J0IFJhbmRvbVN0YXJ0aW5nR2VhciBmcm9tICdyYW5kb20vUmFuZG9tU3RhcnRpbmdHZWFyLmpzJ1xuXHRpbXBvcnQgeyBjaGFyYWN0ZXIgfSBmcm9tICdzdG9yZXMvY2hhcmFjdGVyU3RvcmUuanMnXG5cdGltcG9ydCB7IGJlZm9yZVVwZGF0ZSB9IGZyb20gJ3N2ZWx0ZSdcblxuXHRsZXQgZ2VhcmVkVXAgPSBmYWxzZVxuXG5cdGNvbnN0IHJhbmRvbVN0YXJ0aW5nR2VhciA9ICgpID0+IHtcblx0XHQkY2hhcmFjdGVyID0gUmFuZG9tU3RhcnRpbmdHZWFyKCRjaGFyYWN0ZXIsICRjaGFyYWN0ZXIucHJvcHMubHVjay5zY29yZSlcblx0fVxuXG5cdGJlZm9yZVVwZGF0ZShfID0+IHtcblx0XHRnZWFyZWRVcCA9IE9iamVjdC52YWx1ZXMoJGNoYXJhY3Rlci5nZWFyKS5ldmVyeShnID0+IGcuaW52ZW50b3J5Lmxlbmd0aClcblx0fSlcbjwvc2NyaXB0PlxuXG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkFwb2NhbHlwdGlhIE9ubGluZSAtIENoYXJhY3RlciBDcmVhdG9yIC0gR2VhcjwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGgxPkdlYXI8L2gxPlxuPGRpdiBjbGFzcz0nZXhwbGFuYXRpb24nPlxuXHQ8cD5Zb3Ugc3RhcnQgd2l0aCBzb21lIHJhbmRvbSBHZWFyOiBBIE1lbGVlIHdlYXBvbiwgYSBSYW5nZWQgd2VhcG9uICh3aXRoIGEgbGl0dGxlIEFtbW8pLCBhbmQgQXJtb3IuPC9wPlxuPC9kaXY+XG57I2lmIGdlYXJlZFVwfVxuXHQ8ZGl2IGNsYXNzPSdzZWN0aW9uLWNhcmQnPlxuXHRcdDxkaXYgY2xhc3M9J2l0ZW0tY2F0ZWdvcnknPlxuXHRcdFx0PGgyPk1lbGVlIFdlYXBvbjwvaDI+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz0naXRlbSc+XG5cdFx0XHQ8R2VhckJsb2NrIGl0ZW09eyRjaGFyYWN0ZXIuZ2Vhci5tZWxlZS5pbnZlbnRvcnlbMF19IG1vZGU9eydlZGl0J30gLz5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9J3NlY3Rpb24tY2FyZCc+XG5cdFx0PGRpdiBjbGFzcz0naXRlbS1jYXRlZ29yeSc+XG5cdFx0XHQ8aDI+UmFuZ2VkIFdlYXBvbjwvaDI+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz0naXRlbSc+XG5cdFx0XHQ8R2VhckJsb2NrIGl0ZW09eyRjaGFyYWN0ZXIuZ2Vhci5yYW5nZWQuaW52ZW50b3J5WzBdfSBtb2RlPXsnZWRpdCd9IC8+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPSdzZWN0aW9uLWNhcmQnPlxuXHRcdDxkaXYgY2xhc3M9J2l0ZW0tY2F0ZWdvcnkgYW1tby1oZWFkaW5nJz5cblx0XHRcdDxoMj5BbW1vPC9oMj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPSdpdGVtJz5cblx0XHRcdDxHZWFyQmxvY2sgaXRlbT17JGNoYXJhY3Rlci5nZWFyLmFtbW8uaW52ZW50b3J5WzBdfSBtb2RlPXsnZWRpdCd9IC8+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPSdzZWN0aW9uLWNhcmQnPlxuXHRcdDxkaXYgY2xhc3M9J2l0ZW0tY2F0ZWdvcnknPlxuXHRcdFx0PGgyPkFybW9yPC9oMj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPSdpdGVtJz5cblx0XHRcdDxHZWFyQmxvY2sgaXRlbT17JGNoYXJhY3Rlci5nZWFyLmFybW9yLmludmVudG9yeVswXX0gbW9kZT17J2VkaXQnfSAvPlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz0nc2VjdGlvbi1jYXJkJz5cblx0XHQ8ZGl2IGNsYXNzPSdpdGVtLWNhdGVnb3J5Jz5cblx0XHRcdDxoMj5FcXVpcG1lbnQ8L2gyPlxuXHRcdDwvZGl2PlxuXHRcdHsjZWFjaCAkY2hhcmFjdGVyLmdlYXIuZXF1aXBtZW50LmludmVudG9yeSBhcyBlcXVpcG1lbnR9XG5cdFx0XHQ8ZGl2IGNsYXNzPSdpdGVtJz5cblx0XHRcdFx0PEdlYXJCbG9jayBpdGVtPXtlcXVpcG1lbnR9IG1vZGU9eydlZGl0J30gLz5cblx0XHRcdDwvZGl2PlxuXHRcdHsvZWFjaH1cblx0PC9kaXY+XG57OmVsc2V9XG5cdDxkaXYgY2xhc3M9J2J0bi1yb3cnPlxuXHRcdDxidXR0b24gY2xhc3M9J3NtYWxsLWNudHItYnRuJyBvbjpjbGljaz17cmFuZG9tU3RhcnRpbmdHZWFyfT5SYW5kb208L2J1dHRvbj5cblx0PC9kaXY+XG57L2lmfVxuXG5cbjxzdHlsZT5cblx0Lml0ZW0tY2F0ZWdvcnkge1xuXHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXMxMDApO1xuXHR9XG5cdC5hbW1vLWhlYWRpbmcge1xuXHRcdG1hcmdpbi10b3A6IHZhcigtLXMxMDApO1xuXHR9XG5cdC5pdGVtIHtcblx0XHRib3JkZXI6IDFweCBkb3R0ZWQgbGltZTtcblx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zMTAwKTtcblx0XHRwYWRkaW5nOiB2YXIoLS1zMTAwKTtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpRUFzRTJDLEdBQWtCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkF2Q3pDLEdBQVUsSUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1VBQVMsTUFBTTs7Ozs7Ozt5QkFRaEQsR0FBVSxJQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7VUFBUyxNQUFNOzs7Ozs7O3lCQVFqRCxHQUFVLElBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztVQUFTLE1BQU07Ozs7Ozs7eUJBUS9DLEdBQVUsSUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1VBQVMsTUFBTTs7Ozs7aUNBTzNELEdBQVUsSUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7Ozs7Z0NBQXhDLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswRUEvQlksR0FBVSxJQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7OzswRUFRakMsR0FBVSxJQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7OzswRUFRbEMsR0FBVSxJQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7OzswRUFRaEMsR0FBVSxJQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Z0NBTzVDLEdBQVUsSUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7Ozs7K0JBQXhDLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBRWEsR0FBUyxXQUFRLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0VBQXZCLEdBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBdkN6QixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBbkJSLFFBQVEsR0FBRyxLQUFLOztPQUVkLGtCQUFrQjs2QkFDdkIsVUFBVSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLOzs7Q0FHeEUsWUFBWSxDQUFDLENBQUM7a0JBQ2IsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
