import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, a as validate_slots, b as authUserStore, a8 as recover, f as element, w as text, j as claim_element, k as children, x as claim_text, l as detach_dev, p as add_location, t as insert_dev, r as append_dev, h as space, m as claim_space, n as attr_dev, C as transition_out, D as check_outros, E as transition_in, H as group_outros, N as set_input_value, I as listen_dev, a5 as prevent_default, u as noop, J as run_all, z as create_component, A as claim_component, B as mount_component, F as destroy_component } from './client.ad852c9c.js';
import { S as Spinner } from './Spinner.9ae5f0c7.js';

/* src/routes/login/recover.svelte generated by Svelte v3.29.0 */
const file = "src/routes/login/recover.svelte";

// (33:1) {:else}
function create_else_block(ctx) {
	let form;
	let input0;
	let t;
	let input1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input0 = element("input");
			t = space();
			input1 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", {});
			var form_nodes = children(form);

			input0 = claim_element(form_nodes, "INPUT", {
				type: true,
				required: true,
				autocomplete: true,
				placeholder: true
			});

			t = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { type: true, class: true, value: true });
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "type", "email");
			input0.required = true;
			attr_dev(input0, "autocomplete", "email");
			attr_dev(input0, "placeholder", "Email");
			add_location(input0, file, 34, 3, 665);
			attr_dev(input1, "type", "submit");
			attr_dev(input1, "class", "link-btn");
			input1.value = "Recover";
			add_location(input1, file, 41, 3, 783);
			add_location(form, file, 33, 2, 621);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, input0);
			set_input_value(input0, /*email*/ ctx[0]);
			append_dev(form, t);
			append_dev(form, input1);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
					listen_dev(form, "submit", prevent_default(/*submit*/ ctx[3]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*email*/ 1 && input0.value !== /*email*/ ctx[0]) {
				set_input_value(input0, /*email*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(33:1) {:else}",
		ctx
	});

	return block;
}

// (31:1) {#if pendingApiCall}
function create_if_block_1(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({ $$inline: true });

	const block = {
		c: function create() {
			create_component(spinner.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(spinner.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(spinner, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(31:1) {#if pendingApiCall}",
		ctx
	});

	return block;
}

// (49:1) {#if showSuccessMessage}
function create_if_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("An email has been sent if that account exists to allow you to log in one time. You will need to set your password immediately in order to log in again.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "An email has been sent if that account exists to allow you to log in one time. You will need to set your password immediately in order to log in again.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 49, 2, 899);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(49:1) {#if showSuccessMessage}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block0;
	let t2;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*pendingApiCall*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*showSuccessMessage*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("Request Account Recovery");
			t1 = space();
			if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Request Account Recovery");
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			if_block0.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "card-title");
			add_location(div0, file, 27, 1, 514);
			attr_dev(div1, "class", "cntr-card");
			add_location(div1, file, 26, 0, 489);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			if_blocks[current_block_type_index].m(div1, null);
			append_dev(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div1, t2);
			}

			if (/*showSuccessMessage*/ ctx[1]) {
				if (if_block1) ; else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $authUserStore;
	validate_store(authUserStore, "authUserStore");
	component_subscribe($$self, authUserStore, $$value => $$invalidate(5, $authUserStore = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Recover", slots, []);
	if ($authUserStore) window.location.assign(`www.apocalyptiaonline.com`);
	let email = ``;
	let showSuccessMessage = false;
	let pendingApiCall = false;

	const submit = () => {
		$$invalidate(2, pendingApiCall = true);

		recover(email).then(_ => {
			$$invalidate(1, showSuccessMessage = true);
			$$invalidate(2, pendingApiCall = false);
		}).catch(_ => {
			$$invalidate(2, pendingApiCall = false);
		});
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Recover> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		email = this.value;
		$$invalidate(0, email);
	}

	$$self.$capture_state = () => ({
		Spinner,
		authUserStore,
		recover,
		email,
		showSuccessMessage,
		pendingApiCall,
		submit,
		$authUserStore
	});

	$$self.$inject_state = $$props => {
		if ("email" in $$props) $$invalidate(0, email = $$props.email);
		if ("showSuccessMessage" in $$props) $$invalidate(1, showSuccessMessage = $$props.showSuccessMessage);
		if ("pendingApiCall" in $$props) $$invalidate(2, pendingApiCall = $$props.pendingApiCall);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [email, showSuccessMessage, pendingApiCall, submit, input0_input_handler];
}

class Recover extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Recover",
			options,
			id: create_fragment.name
		});
	}
}

export default Recover;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3Zlci45YTdhZTc2MS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9sb2dpbi9yZWNvdmVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgU3Bpbm5lciBmcm9tICd2aWV3cy93aWRnZXRzL1NwaW5uZXIuc3ZlbHRlJ1xuXHRpbXBvcnQgeyBhdXRoVXNlclN0b3JlLCByZWNvdmVyIH0gZnJvbSAnc3RvcmVzL25ldGxpZnlTdG9yZS5qcydcblxuXHRpZiAoJGF1dGhVc2VyU3RvcmUpIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oYHd3dy5hcG9jYWx5cHRpYW9ubGluZS5jb21gKVxuXG5cdGxldCBlbWFpbCA9IGBgXG5cblx0bGV0IHNob3dTdWNjZXNzTWVzc2FnZSA9IGZhbHNlXG5cblx0bGV0IHBlbmRpbmdBcGlDYWxsID0gZmFsc2VcblxuXHRjb25zdCBzdWJtaXQgPSAoKSA9PiB7XG5cdFx0cGVuZGluZ0FwaUNhbGwgPSB0cnVlXG5cdFx0cmVjb3ZlcihlbWFpbClcblx0XHRcdC50aGVuKF8gPT4ge1xuXHRcdFx0XHRzaG93U3VjY2Vzc01lc3NhZ2UgPSB0cnVlXG5cdFx0XHRcdHBlbmRpbmdBcGlDYWxsID0gZmFsc2Vcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goXyA9PiB7XG5cdFx0XHRcdHBlbmRpbmdBcGlDYWxsID0gZmFsc2Vcblx0XHRcdH0pXG5cdH1cbjwvc2NyaXB0PlxuXG5cbjxkaXYgY2xhc3M9J2NudHItY2FyZCc+XG5cdDxkaXYgY2xhc3M9J2NhcmQtdGl0bGUnPlxuXHRcdFJlcXVlc3QgQWNjb3VudCBSZWNvdmVyeVxuXHQ8L2Rpdj5cblx0eyNpZiBwZW5kaW5nQXBpQ2FsbH1cblx0XHQ8U3Bpbm5lciAvPlxuXHR7OmVsc2V9XG5cdFx0PGZvcm0gb246c3VibWl0fHByZXZlbnREZWZhdWx0PXtzdWJtaXR9PlxuXHRcdFx0PGlucHV0XG5cdFx0XHRcdHR5cGU9J2VtYWlsJ1xuXHRcdFx0XHRyZXF1aXJlZFxuXHRcdFx0XHRhdXRvY29tcGxldGU9J2VtYWlsJ1xuXHRcdFx0XHRwbGFjZWhvbGRlcj0nRW1haWwnXG5cdFx0XHRcdGJpbmQ6dmFsdWU9e2VtYWlsfVxuXHRcdFx0Lz5cblx0XHRcdDxpbnB1dFxuXHRcdFx0XHR0eXBlPSdzdWJtaXQnXG5cdFx0XHRcdGNsYXNzPSdsaW5rLWJ0bidcblx0XHRcdFx0dmFsdWU9J1JlY292ZXInXG5cdFx0XHQ+XG5cdFx0PC9mb3JtPlxuXHR7L2lmfVxuXHR7I2lmIHNob3dTdWNjZXNzTWVzc2FnZX1cblx0XHQ8cD5BbiBlbWFpbCBoYXMgYmVlbiBzZW50IGlmIHRoYXQgYWNjb3VudCBleGlzdHMgdG8gYWxsb3cgeW91IHRvIGxvZyBpbiBvbmUgdGltZS4gWW91IHdpbGwgbmVlZCB0byBzZXQgeW91ciBwYXNzd29yZCBpbW1lZGlhdGVseSBpbiBvcmRlciB0byBsb2cgaW4gYWdhaW4uPC9wPlxuXHR7L2lmfVxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0F1Q2dCLEdBQUs7Ozs7Ozs7MkRBTmEsR0FBTTs7Ozs7Ozt5REFNeEIsR0FBSztzQ0FBTCxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBVGYsR0FBYzs7Ozs7O3dDQWtCZCxHQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBQWxCLEdBQWtCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTVDbkIsY0FBYyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTTtLQUV0QyxLQUFLO0tBRUwsa0JBQWtCLEdBQUcsS0FBSztLQUUxQixjQUFjLEdBQUcsS0FBSzs7T0FFcEIsTUFBTTtrQkFDWCxjQUFjLEdBQUcsSUFBSTs7RUFDckIsT0FBTyxDQUFDLEtBQUssRUFDWCxJQUFJLENBQUMsQ0FBQzttQkFDTixrQkFBa0IsR0FBRyxJQUFJO21CQUN6QixjQUFjLEdBQUcsS0FBSztLQUV0QixLQUFLLENBQUMsQ0FBQzttQkFDUCxjQUFjLEdBQUcsS0FBSzs7Ozs7Ozs7Ozs7RUFtQlYsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
