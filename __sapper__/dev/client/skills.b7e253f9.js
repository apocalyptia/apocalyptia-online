import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, K as validate_each_argument, v as validate_store, c as component_subscribe, a as validate_slots, f as element, F as text, j as claim_element, k as children, G as claim_text, l as detach_dev, p as add_location, t as insert_dev, r as append_dev, u as noop, h as space, m as claim_space, n as attr_dev, L as set_data_dev, B as transition_in, z as transition_out, A as check_outros, M as destroy_each, q as query_selector_all, H as listen_dev, I as run_all, D as set_store_value, $ as binding_callbacks, a0 as bind, w as create_component, x as claim_component, y as mount_component, a1 as add_flush_callback, C as destroy_component, E as group_outros } from './client.ac32a3b6.js';
import { c as character } from './characterStore.4f6031d2.js';
import { S as Skills } from './Skills.35c4252b.js';
import './Specialty.adf26afb.js';
import './ConstitutionSkills.56e093ee.js';
import './RandomRoll.f18d347c.js';
import { S as Slider } from './Slider.9316752f.js';

/* src/routes/character/creator/skills.svelte generated by Svelte v3.29.0 */
const file = "src/routes/character/creator/skills.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[11] = list;
	child_ctx[12] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (21:1) {#each Skills.explanation as line}
function create_each_block_2(ctx) {
	let p;
	let t_value = /*line*/ ctx[13] + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 21, 2, 592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(21:1) {#each Skills.explanation as line}",
		ctx
	});

	return block;
}

// (40:4) {#each group.list as skill}
function create_each_block_1(ctx) {
	let div1;
	let div0;
	let t0_value = /*skill*/ ctx[10].name + "";
	let t0;
	let t1;
	let slider;
	let updating_value;
	let t2;
	let current;

	function slider_value_binding(value) {
		/*slider_value_binding*/ ctx[5].call(null, value, /*skill*/ ctx[10]);
	}

	let slider_props = {
		name: /*skill*/ ctx[10].name.toLowerCase(),
		min: parseInt(0),
		max: parseInt(6)
	};

	if (/*$character*/ ctx[1].skills[/*skill*/ ctx[10].name.toLowerCase()].score !== void 0) {
		slider_props.value = /*$character*/ ctx[1].skills[/*skill*/ ctx[10].name.toLowerCase()].score;
	}

	slider = new Slider({ props: slider_props, $$inline: true });
	binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
	slider.$on("input", /*input_handler*/ ctx[6]);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			create_component(slider.$$.fragment);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			claim_component(slider.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "stat-label");
			add_location(div0, file, 41, 6, 1082);
			attr_dev(div1, "class", "stat-range svelte-16c7r26");
			add_location(div1, file, 40, 5, 1051);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			mount_component(slider, div1, null);
			append_dev(div1, t2);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const slider_changes = {};

			if (!updating_value && dirty & /*$character, Skills*/ 2) {
				updating_value = true;
				slider_changes.value = /*$character*/ ctx[1].skills[/*skill*/ ctx[10].name.toLowerCase()].score;
				add_flush_callback(() => updating_value = false);
			}

			slider.$set(slider_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(slider);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(40:4) {#each group.list as skill}",
		ctx
	});

	return block;
}

// (29:1) {#each Skills.groups as group}
function create_each_block(ctx) {
	let details;
	let summary;
	let span;
	let t0_value = /*group*/ ctx[7].name + "";
	let t0;
	let t1;
	let t2;
	let div1;
	let div0;
	let t3;
	let t4_value = /*$character*/ ctx[1].traits[/*group*/ ctx[7].name.toLowerCase()].score + "";
	let t4;
	let t5;
	let t6;
	let current;
	let each_value_1 = /*group*/ ctx[7].list;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			details = element("details");
			summary = element("summary");
			span = element("span");
			t0 = text(t0_value);
			t1 = text(" Skills");
			t2 = space();
			div1 = element("div");
			div0 = element("div");
			t3 = text("Max Score: ");
			t4 = text(t4_value);
			t5 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			this.h();
		},
		l: function claim(nodes) {
			details = claim_element(nodes, "DETAILS", { class: true });
			var details_nodes = children(details);
			summary = claim_element(details_nodes, "SUMMARY", {});
			var summary_nodes = children(summary);
			span = claim_element(summary_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			t1 = claim_text(span_nodes, " Skills");
			span_nodes.forEach(detach_dev);
			summary_nodes.forEach(detach_dev);
			t2 = claim_space(details_nodes);
			div1 = claim_element(details_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t3 = claim_text(div0_nodes, "Max Score: ");
			t4 = claim_text(div0_nodes, t4_value);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t6 = claim_space(details_nodes);
			details_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "group-label svelte-16c7r26");
			add_location(span, file, 31, 4, 796);
			add_location(summary, file, 30, 3, 782);
			attr_dev(div0, "class", "max-score svelte-16c7r26");
			add_location(div0, file, 36, 4, 911);
			attr_dev(div1, "class", "details-content");
			add_location(div1, file, 35, 3, 877);
			attr_dev(details, "class", "skills-details svelte-16c7r26");
			add_location(details, file, 29, 2, 746);
		},
		m: function mount(target, anchor) {
			insert_dev(target, details, anchor);
			append_dev(details, summary);
			append_dev(summary, span);
			append_dev(span, t0);
			append_dev(span, t1);
			append_dev(details, t2);
			append_dev(details, div1);
			append_dev(div1, div0);
			append_dev(div0, t3);
			append_dev(div0, t4);
			append_dev(div1, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append_dev(details, t6);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*$character*/ 2) && t4_value !== (t4_value = /*$character*/ ctx[1].traits[/*group*/ ctx[7].name.toLowerCase()].score + "")) set_data_dev(t4, t4_value);

			if (dirty & /*Skills, parseInt, $character, assign*/ 6) {
				each_value_1 = /*group*/ ctx[7].list;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(details);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:1) {#each Skills.groups as group}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div0;
	let t3;
	let div1;
	let h3;
	let t4;
	let t5;
	let t6;
	let div2;
	let t7;
	let div3;
	let button0;
	let t8;
	let t9;
	let button1;
	let t10;
	let current;
	let mounted;
	let dispose;
	let each_value_2 = Skills.explanation;
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value = Skills.groups;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Skills");
			t2 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			div1 = element("div");
			h3 = element("h3");
			t4 = text("Points Remaining: ");
			t5 = text(/*remaining*/ ctx[0]);
			t6 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div3 = element("div");
			button0 = element("button");
			t8 = text("Reset");
			t9 = space();
			button1 = element("button");
			t10 = text("Random");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1mjzsqb\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Skills");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t4 = claim_text(h3_nodes, "Points Remaining: ");
			t5 = claim_text(h3_nodes, /*remaining*/ ctx[0]);
			h3_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			button0 = claim_element(div3_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t8 = claim_text(button0_nodes, "Reset");
			button0_nodes.forEach(detach_dev);
			t9 = claim_space(div3_nodes);
			button1 = claim_element(div3_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t10 = claim_text(button1_nodes, "Random");
			button1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Apocalyptia Online - Character Creator - Skills";
			add_location(h1, file, 18, 0, 512);
			attr_dev(div0, "class", "explanation");
			add_location(div0, file, 19, 0, 528);
			add_location(h3, file, 25, 1, 647);
			attr_dev(div1, "class", "remaining");
			add_location(div1, file, 24, 0, 622);
			attr_dev(div2, "class", "list");
			add_location(div2, file, 27, 0, 693);
			attr_dev(button0, "class", "small-cntr-btn");
			add_location(button0, file, 56, 1, 1436);
			attr_dev(button1, "class", "small-cntr-btn");
			add_location(button1, file, 59, 1, 1505);
			attr_dev(div3, "class", "btn-row");
			add_location(div3, file, 55, 0, 1413);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t4);
			append_dev(h3, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			insert_dev(target, t7, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, button0);
			append_dev(button0, t8);
			append_dev(div3, t9);
			append_dev(div3, button1);
			append_dev(button1, t10);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*reset*/ ctx[4], false, false, false),
					listen_dev(button1, "click", /*random*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*Skills*/ 0) {
				each_value_2 = Skills.explanation;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (!current || dirty & /*remaining*/ 1) set_data_dev(t5, /*remaining*/ ctx[0]);

			if (dirty & /*Skills, parseInt, $character, assign*/ 6) {
				each_value = Skills.groups;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div3);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $character;
	validate_store(character, "character");
	component_subscribe($$self, character, $$value => $$invalidate(1, $character = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Skills", slots, []);
	const assign = event => set_store_value(character, $character = Skills.assign($character, event.target), $character);
	const random = () => set_store_value(character, $character = Skills.random($character), $character);
	const reset = () => set_store_value(character, $character = Skills.reset($character), $character);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Skills> was created with unknown prop '${key}'`);
	});

	function slider_value_binding(value, skill) {
		$character.skills[skill.name.toLowerCase()].score = value;
		character.set($character);
	}

	const input_handler = event => assign(event);

	$$self.$capture_state = () => ({
		Skills,
		Slider,
		character,
		assign,
		random,
		reset,
		remaining,
		$character
	});

	$$self.$inject_state = $$props => {
		if ("remaining" in $$props) $$invalidate(0, remaining = $$props.remaining);
	};

	let remaining;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$character*/ 2) {
			 $$invalidate(0, remaining = Skills.remaining($character));
		}
	};

	return [
		remaining,
		$character,
		assign,
		random,
		reset,
		slider_value_binding,
		input_handler
	];
}

class Skills_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Skills_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Skills_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpbGxzLmI3ZTI1M2Y5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2NoYXJhY3Rlci9jcmVhdG9yL3NraWxscy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IFNraWxscyBmcm9tICdydWxlcy9za2lsbHMvU2tpbGxzLmpzJ1xuXHRpbXBvcnQgU2xpZGVyIGZyb20gJ3ZpZXdzL3dpZGdldHMvU2xpZGVyLnN2ZWx0ZSdcblx0aW1wb3J0IHsgY2hhcmFjdGVyIH0gZnJvbSAnc3RvcmVzL2NoYXJhY3RlclN0b3JlLmpzJ1xuXG5cdCQ6IHJlbWFpbmluZyA9IFNraWxscy5yZW1haW5pbmcoJGNoYXJhY3RlcilcblxuXHRjb25zdCBhc3NpZ24gPSAoZXZlbnQpID0+ICRjaGFyYWN0ZXIgPSBTa2lsbHMuYXNzaWduKCRjaGFyYWN0ZXIsIGV2ZW50LnRhcmdldClcblxuXHRjb25zdCByYW5kb20gPSAoKSA9PiAkY2hhcmFjdGVyID0gU2tpbGxzLnJhbmRvbSgkY2hhcmFjdGVyKVxuXG5cdGNvbnN0IHJlc2V0ID0gKCkgPT4gJGNoYXJhY3RlciA9IFNraWxscy5yZXNldCgkY2hhcmFjdGVyKVxuPC9zY3JpcHQ+XG5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QXBvY2FseXB0aWEgT25saW5lIC0gQ2hhcmFjdGVyIENyZWF0b3IgLSBTa2lsbHM8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxoMT5Ta2lsbHM8L2gxPlxuPGRpdiBjbGFzcz0nZXhwbGFuYXRpb24nPlxuXHR7I2VhY2ggU2tpbGxzLmV4cGxhbmF0aW9uIGFzIGxpbmV9XG5cdFx0PHA+e2xpbmV9PC9wPlxuXHR7L2VhY2h9XG48L2Rpdj5cbjxkaXYgY2xhc3M9J3JlbWFpbmluZyc+XG5cdDxoMz5Qb2ludHMgUmVtYWluaW5nOiB7cmVtYWluaW5nfTwvaDM+XG48L2Rpdj5cbjxkaXYgY2xhc3M9J2xpc3QnPlxuXHR7I2VhY2ggU2tpbGxzLmdyb3VwcyBhcyBncm91cH1cblx0XHQ8ZGV0YWlscyBjbGFzcz0nc2tpbGxzLWRldGFpbHMnPlxuXHRcdFx0PHN1bW1hcnk+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPSdncm91cC1sYWJlbCc+XG5cdFx0XHRcdFx0e2dyb3VwLm5hbWV9IFNraWxsc1xuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8L3N1bW1hcnk+XG5cdFx0XHQ8ZGl2IGNsYXNzPSdkZXRhaWxzLWNvbnRlbnQnPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdtYXgtc2NvcmUnPlxuXHRcdFx0XHRcdE1heCBTY29yZTogeyRjaGFyYWN0ZXIudHJhaXRzW2dyb3VwLm5hbWUudG9Mb3dlckNhc2UoKV0uc2NvcmV9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHR7I2VhY2ggZ3JvdXAubGlzdCBhcyBza2lsbH1cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdzdGF0LXJhbmdlJz5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J3N0YXQtbGFiZWwnPntza2lsbC5uYW1lfTwvZGl2PlxuXHRcdFx0XHRcdFx0PFNsaWRlclxuXHRcdFx0XHRcdFx0XHRuYW1lPSd7c2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpfSdcblx0XHRcdFx0XHRcdFx0bWluPXtwYXJzZUludCgwKX1cblx0XHRcdFx0XHRcdFx0bWF4PXtwYXJzZUludCg2KX1cblx0XHRcdFx0XHRcdFx0YmluZDp2YWx1ZT17JGNoYXJhY3Rlci5za2lsbHNbc2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpXS5zY29yZX1cblx0XHRcdFx0XHRcdFx0b246aW5wdXQ9e2V2ZW50ID0+IGFzc2lnbihldmVudCl9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHR7L2VhY2h9XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2RldGFpbHM+XG5cdHsvZWFjaH1cbjwvZGl2PlxuPGRpdiBjbGFzcz0nYnRuLXJvdyc+XG5cdDxidXR0b24gY2xhc3M9J3NtYWxsLWNudHItYnRuJyBvbjpjbGljaz17cmVzZXR9PlxuXHRcdFJlc2V0XG5cdDwvYnV0dG9uPlxuXHQ8YnV0dG9uIGNsYXNzPSdzbWFsbC1jbnRyLWJ0bicgb246Y2xpY2s9e3JhbmRvbX0+XG5cdFx0UmFuZG9tXG5cdDwvYnV0dG9uPlxuPC9kaXY+XG5cblxuPHN0eWxlPlxuXHQuc2tpbGxzLWRldGFpbHMge1xuXHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXMxMDApO1xuXHR9XG5cdC5ncm91cC1sYWJlbCB7XG5cdFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdH1cblx0Lm1heC1zY29yZSB7XG5cdFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdFx0bWFyZ2luLXRvcDogdmFyKC0tczE1MCk7XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHR9XG5cdC5zdGF0LXJhbmdlIHtcblx0XHRtYXJnaW46IHZhcigtLXMxMDApO1xuXHR9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQXFCTSxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFvQnFCLEdBQUssS0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7O2tCQUUzQixHQUFLLEtBQUMsSUFBSSxDQUFDLFdBQVc7T0FDeEIsUUFBUSxDQUFDLENBQUM7T0FDVixRQUFRLENBQUMsQ0FBQzs7O29CQUNILEdBQVUsSUFBQyxNQUFNLFdBQUMsR0FBSyxLQUFDLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSztzQ0FBakQsR0FBVSxJQUFDLE1BQU0sV0FBQyxHQUFLLEtBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MENBQWpELEdBQVUsSUFBQyxNQUFNLFdBQUMsR0FBSyxLQUFDLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFkOUQsR0FBSyxJQUFDLElBQUk7Ozs7Ozs7K0JBS0MsR0FBVSxJQUFDLE1BQU0sV0FBQyxHQUFLLElBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLOzs7Ozs4QkFFdkQsR0FBSyxJQUFDLElBQUk7Ozs7a0NBQWYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5RkFGTyxHQUFVLElBQUMsTUFBTSxXQUFDLEdBQUssSUFBQyxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUs7Ozs2QkFFdkQsR0FBSyxJQUFDLElBQUk7Ozs7aUNBQWYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OzswQkFBSixNQUFJOzs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBbkJGLE1BQU0sQ0FBQyxXQUFXOzs7O2tDQUF2QixNQUFJOzs7O2tCQVFDLE1BQU0sQ0FBQyxNQUFNOzs7O2dDQUFsQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBSGlCLEdBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBQVQsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQStCUyxHQUFLOzZDQUdMLEdBQU07Ozs7Ozs7O21CQXZDeEMsTUFBTSxDQUFDLFdBQVc7Ozs7aUNBQXZCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0NBQUosTUFBSTs7OzJFQUtpQixHQUFTOzs7aUJBR3pCLE1BQU0sQ0FBQyxNQUFNOzs7OytCQUFsQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FyQkEsTUFBTSxHQUFJLEtBQUssK0JBQUssVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNO09BRXZFLE1BQU0sb0NBQVMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVTtPQUVwRCxLQUFLLG9DQUFTLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVU7Ozs7Ozs7O0VBbUN0QyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUs7Ozs7dUJBQ25ELEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkExQ2xDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
