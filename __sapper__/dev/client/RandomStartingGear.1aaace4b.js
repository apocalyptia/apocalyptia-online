import { M as MeleeWeaponList, R as RangedWeaponList, A as AmmoList, a as ArmorList, E as EquipmentList } from './RangedWeaponList.4703ea51.js';
import { R as RandomRoll } from './RandomRoll.f18d347c.js';
import { d as d6 } from './d6.b655a31f.js';

const RandomMeleeWeapon = (c) => {
    let randomMeleeWeapon = RandomRoll(MeleeWeaponList);
    randomMeleeWeapon.qty = 1;
    c.gear.melee.inventory.push(randomMeleeWeapon);
    return c
};

const RandomRangedWeapon = (c) => {
    let randomRangedWeapon = RandomRoll(RangedWeaponList);
    randomRangedWeapon.qty = 1;
    c.gear.ranged.inventory.push(randomRangedWeapon);
    return c
};

const Nd6 = (n) => {
	let total = 0;
	for (let i = 0; i < n; i++) total += d6();
	return total
};

const RandomWeaponAmmo = (c) => {
    const compatibleAmmo = AmmoList.filter(a => {
        return a.cal == c.gear.ranged.inventory[0].cal
    });
    const ammo = RandomRoll(compatibleAmmo);
    ammo.qty = Nd6(1);
    c.gear.ammo.inventory.push(ammo);
    return c
};

const RandomArmor = (c) => {
    let randomArmor = RandomRoll(ArmorList);
    randomArmor.qty = 1;
    c.gear.armor.inventory.push(randomArmor);
    return c
};

const RandomEquipment = (c, n) => {
    let equipment = [];
    for (let i = 0; i < n; i++) { 
        let randomItem = RandomRoll(EquipmentList);
        let existingItemIndex = equipment.findIndex(item => item.id == randomItem.id);
        if (existingItemIndex > -1) {
            equipment[existingItemIndex].qty++;
        }
        else {
            randomItem.qty = 1;
            equipment.push(randomItem);
        }
    }
    c.gear.equipment.inventory = [...equipment];
    return c
};

const RandomStartingGear = (c, n) => {
    c = RandomMeleeWeapon(c);
    c = RandomRangedWeapon(c);
    c = RandomWeaponAmmo(c);
    c = RandomArmor(c);
    c = RandomEquipment(c, n);
    return c
};

export { RandomStartingGear as R };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFuZG9tU3RhcnRpbmdHZWFyLjFhYWFjZTRiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9oZWxwZXJzL3JhbmRvbS9SYW5kb21NZWxlZVdlYXBvbi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvcmFuZG9tL1JhbmRvbVJhbmdlZFdlYXBvbi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvcmFuZG9tL05kNi5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvcmFuZG9tL1JhbmRvbVdlYXBvbkFtbW8uanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9oZWxwZXJzL3JhbmRvbS9SYW5kb21Bcm1vci5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvcmFuZG9tL1JhbmRvbUVxdWlwbWVudC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvcmFuZG9tL1JhbmRvbVN0YXJ0aW5nR2Vhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmFuZG9tUm9sbCBmcm9tICdyYW5kb20vUmFuZG9tUm9sbC5qcydcbmltcG9ydCBNZWxlZVdlYXBvbkxpc3QgZnJvbSAncnVsZXMvZ2Vhci93ZWFwb25zL21lbGVlL01lbGVlV2VhcG9uTGlzdC5qcydcblxuY29uc3QgUmFuZG9tTWVsZWVXZWFwb24gPSAoYykgPT4ge1xuICAgIGxldCByYW5kb21NZWxlZVdlYXBvbiA9IFJhbmRvbVJvbGwoTWVsZWVXZWFwb25MaXN0KVxuICAgIHJhbmRvbU1lbGVlV2VhcG9uLnF0eSA9IDFcbiAgICBjLmdlYXIubWVsZWUuaW52ZW50b3J5LnB1c2gocmFuZG9tTWVsZWVXZWFwb24pXG4gICAgcmV0dXJuIGNcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tTWVsZWVXZWFwb24iLCJpbXBvcnQgUmFuZG9tUm9sbCBmcm9tICdyYW5kb20vUmFuZG9tUm9sbC5qcydcbmltcG9ydCBSYW5nZWRXZWFwb25MaXN0IGZyb20gJ3J1bGVzL2dlYXIvd2VhcG9ucy9yYW5nZWQvUmFuZ2VkV2VhcG9uTGlzdC5qcydcblxuY29uc3QgUmFuZG9tUmFuZ2VkV2VhcG9uID0gKGMpID0+IHtcbiAgICBsZXQgcmFuZG9tUmFuZ2VkV2VhcG9uID0gUmFuZG9tUm9sbChSYW5nZWRXZWFwb25MaXN0KVxuICAgIHJhbmRvbVJhbmdlZFdlYXBvbi5xdHkgPSAxXG4gICAgYy5nZWFyLnJhbmdlZC5pbnZlbnRvcnkucHVzaChyYW5kb21SYW5nZWRXZWFwb24pXG4gICAgcmV0dXJuIGNcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tUmFuZ2VkV2VhcG9uIiwiaW1wb3J0IGQ2IGZyb20gJy4vZDYnXG5cblxuY29uc3QgTmQ2ID0gKG4pID0+IHtcblx0bGV0IHRvdGFsID0gMFxuXHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykgdG90YWwgKz0gZDYoKVxuXHRyZXR1cm4gdG90YWxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmQ2IiwiaW1wb3J0IFJhbmRvbVJvbGwgZnJvbSAncmFuZG9tL1JhbmRvbVJvbGwuanMnXG5pbXBvcnQgTmQ2IGZyb20gJ3JhbmRvbS9OZDYuanMnXG5pbXBvcnQgQW1tb0xpc3QgZnJvbSAncnVsZXMvZ2Vhci93ZWFwb25zL2FtbW8vQW1tb0xpc3QuanMnXG5cbmNvbnN0IFJhbmRvbVdlYXBvbkFtbW8gPSAoYykgPT4ge1xuICAgIGNvbnN0IGNvbXBhdGlibGVBbW1vID0gQW1tb0xpc3QuZmlsdGVyKGEgPT4ge1xuICAgICAgICByZXR1cm4gYS5jYWwgPT0gYy5nZWFyLnJhbmdlZC5pbnZlbnRvcnlbMF0uY2FsXG4gICAgfSlcbiAgICBjb25zdCBhbW1vID0gUmFuZG9tUm9sbChjb21wYXRpYmxlQW1tbylcbiAgICBhbW1vLnF0eSA9IE5kNigxKVxuICAgIGMuZ2Vhci5hbW1vLmludmVudG9yeS5wdXNoKGFtbW8pXG4gICAgcmV0dXJuIGNcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tV2VhcG9uQW1tbyIsImltcG9ydCBSYW5kb21Sb2xsIGZyb20gJ3JhbmRvbS9SYW5kb21Sb2xsLmpzJ1xuaW1wb3J0IEFybW9yTGlzdCBmcm9tICdydWxlcy9nZWFyL2FybW9yL0FybW9yTGlzdC5qcydcblxuY29uc3QgUmFuZG9tQXJtb3IgPSAoYykgPT4ge1xuICAgIGxldCByYW5kb21Bcm1vciA9IFJhbmRvbVJvbGwoQXJtb3JMaXN0KVxuICAgIHJhbmRvbUFybW9yLnF0eSA9IDFcbiAgICBjLmdlYXIuYXJtb3IuaW52ZW50b3J5LnB1c2gocmFuZG9tQXJtb3IpXG4gICAgcmV0dXJuIGNcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tQXJtb3IiLCJpbXBvcnQgUmFuZG9tUm9sbCBmcm9tICdyYW5kb20vUmFuZG9tUm9sbC5qcydcbmltcG9ydCBFcXVpcG1lbnRMaXN0IGZyb20gJ3J1bGVzL2dlYXIvZXF1aXBtZW50L0VxdWlwbWVudExpc3QuanMnXG5cbmNvbnN0IFJhbmRvbUVxdWlwbWVudCA9IChjLCBuKSA9PiB7XG4gICAgbGV0IGVxdWlwbWVudCA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHsgXG4gICAgICAgIGxldCByYW5kb21JdGVtID0gUmFuZG9tUm9sbChFcXVpcG1lbnRMaXN0KVxuICAgICAgICBsZXQgZXhpc3RpbmdJdGVtSW5kZXggPSBlcXVpcG1lbnQuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PSByYW5kb21JdGVtLmlkKVxuICAgICAgICBpZiAoZXhpc3RpbmdJdGVtSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgZXF1aXBtZW50W2V4aXN0aW5nSXRlbUluZGV4XS5xdHkrK1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFuZG9tSXRlbS5xdHkgPSAxXG4gICAgICAgICAgICBlcXVpcG1lbnQucHVzaChyYW5kb21JdGVtKVxuICAgICAgICB9XG4gICAgfVxuICAgIGMuZ2Vhci5lcXVpcG1lbnQuaW52ZW50b3J5ID0gWy4uLmVxdWlwbWVudF1cbiAgICByZXR1cm4gY1xufVxuXG5leHBvcnQgZGVmYXVsdCBSYW5kb21FcXVpcG1lbnQiLCJpbXBvcnQgUmFuZG9tTWVsZWVXZWFwb24gZnJvbSAnLi9SYW5kb21NZWxlZVdlYXBvbidcbmltcG9ydCBSYW5kb21SYW5nZWRXZWFwb24gZnJvbSAnLi9SYW5kb21SYW5nZWRXZWFwb24nXG5pbXBvcnQgUmFuZG9tV2VhcG9uQW1tbyBmcm9tICcuL1JhbmRvbVdlYXBvbkFtbW8nXG5pbXBvcnQgUmFuZG9tQXJtb3IgZnJvbSAnLi9SYW5kb21Bcm1vcidcbmltcG9ydCBSYW5kb21FcXVpcG1lbnQgZnJvbSAnLi9SYW5kb21FcXVpcG1lbnQnXG5cbmNvbnN0IFJhbmRvbVN0YXJ0aW5nR2VhciA9IChjLCBuKSA9PiB7XG4gICAgYyA9IFJhbmRvbU1lbGVlV2VhcG9uKGMpXG4gICAgYyA9IFJhbmRvbVJhbmdlZFdlYXBvbihjKVxuICAgIGMgPSBSYW5kb21XZWFwb25BbW1vKGMpXG4gICAgYyA9IFJhbmRvbUFybW9yKGMpXG4gICAgYyA9IFJhbmRvbUVxdWlwbWVudChjLCBuKVxuICAgIHJldHVybiBjXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmRvbVN0YXJ0aW5nR2VhciJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsS0FBSztBQUNqQyxJQUFJLElBQUksaUJBQWlCLEdBQUcsVUFBVSxDQUFDLGVBQWUsRUFBQztBQUN2RCxJQUFJLGlCQUFpQixDQUFDLEdBQUcsR0FBRyxFQUFDO0FBQzdCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBQztBQUNsRCxJQUFJLE9BQU8sQ0FBQztBQUNaOztBQ0xBLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEtBQUs7QUFDbEMsSUFBSSxJQUFJLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsRUFB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
