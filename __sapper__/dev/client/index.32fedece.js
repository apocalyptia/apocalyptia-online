import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, L as validate_each_argument, X as empty, n as insert_dev, E as transition_in, H as group_outros, C as transition_out, D as check_outros, M as destroy_each, k as detach_dev, y as create_component, A as claim_component, B as mount_component, F as destroy_component, f as element, t as text, q as space, h as claim_element, j as children, r as claim_text, u as claim_space, m as add_location, l as attr_dev, w as append_dev, I as listen_dev, x as set_data_dev, Y as beforeUpdate, z as query_selector_all, N as set_input_value, p as noop } from './client.132f4c13.js';
import { B as BackButton } from './BackButton.3e771c53.js';
import './SWBodyguard.54177d3a.js';
import './Thermite.a457c57f.js';
import './BombList.4927c2b7.js';
import { aL as Gear } from './StorageList.71288974.js';
import './AppendToGUUID.176d1458.js';
import './Skills.35c4252b.js';
import { G as GearBlock } from './GearBlock.42b46b15.js';
import './Specialty.adf26afb.js';
import './ConstitutionSkills.56e093ee.js';
import './RandomRoll.f18d347c.js';
import './Traits.2656d3ca.js';
import './Speed.66ad8113.js';
import { M as ManRuleDesc, a as ManRuleSpecs, b as ManRuleTable, c as ManSubRule, d as Manual } from './ManSubRule.8cd2828d.js';

/* src/components/views/manual/ManRule.svelte generated by Svelte v3.29.0 */
const file = "src/components/views/manual/ManRule.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (23:12) {#if rule.desc != undefined}
function create_if_block_4(ctx) {
	let manruledesc;
	let current;

	manruledesc = new ManRuleDesc({
			props: { rule: /*rule*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(manruledesc.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(manruledesc.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(manruledesc, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const manruledesc_changes = {};
			if (dirty & /*rule*/ 1) manruledesc_changes.rule = /*rule*/ ctx[0];
			manruledesc.$set(manruledesc_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(manruledesc.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(manruledesc.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(manruledesc, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(23:12) {#if rule.desc != undefined}",
		ctx
	});

	return block;
}

// (18:8) {#if rule instanceof Gear }
function create_if_block_3(ctx) {
	let div;
	let gearblock;
	let current;

	gearblock = new GearBlock({
			props: { item: /*rule*/ ctx[0], mode: "manual" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(gearblock.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(gearblock.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "gear-rule svelte-swvhnw");
			add_location(div, file, 18, 12, 570);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(gearblock, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const gearblock_changes = {};
			if (dirty & /*rule*/ 1) gearblock_changes.item = /*rule*/ ctx[0];
			gearblock.$set(gearblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(gearblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(gearblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(gearblock);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(18:8) {#if rule instanceof Gear }",
		ctx
	});

	return block;
}

// (27:8) {#if rule.subrules}
function create_if_block_2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*rule*/ ctx[0].subrules;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*rule*/ 1) {
				each_value = /*rule*/ ctx[0].subrules;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(27:8) {#if rule.subrules}",
		ctx
	});

	return block;
}

// (28:12) {#each rule.subrules as subrule}
function create_each_block(ctx) {
	let mansubrule;
	let current;

	mansubrule = new ManSubRule({
			props: { subrule: /*subrule*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(mansubrule.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(mansubrule.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(mansubrule, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const mansubrule_changes = {};
			if (dirty & /*rule*/ 1) mansubrule_changes.subrule = /*subrule*/ ctx[2];
			mansubrule.$set(mansubrule_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mansubrule.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mansubrule.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mansubrule, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(28:12) {#each rule.subrules as subrule}",
		ctx
	});

	return block;
}

// (32:8) {#if rule.table != undefined}
function create_if_block_1(ctx) {
	let manruletable;
	let current;

	manruletable = new ManRuleTable({
			props: { rule: /*rule*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(manruletable.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(manruletable.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(manruletable, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const manruletable_changes = {};
			if (dirty & /*rule*/ 1) manruletable_changes.rule = /*rule*/ ctx[0];
			manruletable.$set(manruletable_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(manruletable.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(manruletable.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(manruletable, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(32:8) {#if rule.table != undefined}",
		ctx
	});

	return block;
}

// (35:8) {#if rule.specs}
function create_if_block(ctx) {
	let manrulespecs;
	let current;

	manrulespecs = new ManRuleSpecs({
			props: { rule: /*rule*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(manrulespecs.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(manrulespecs.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(manrulespecs, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const manrulespecs_changes = {};
			if (dirty & /*rule*/ 1) manrulespecs_changes.rule = /*rule*/ ctx[0];
			manrulespecs.$set(manrulespecs_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(manrulespecs.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(manrulespecs.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(manrulespecs, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(35:8) {#if rule.specs}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let details;
	let summary;
	let t0_value = /*rule*/ ctx[0].name + "";
	let t0;
	let t1;
	let div;
	let current_block_type_index;
	let if_block0;
	let t2;
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_3, create_if_block_4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*rule*/ ctx[0] instanceof Gear) return 0;
		if (/*rule*/ ctx[0].desc != undefined) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*rule*/ ctx[0].subrules && create_if_block_2(ctx);
	let if_block2 = /*rule*/ ctx[0].table != undefined && create_if_block_1(ctx);
	let if_block3 = /*rule*/ ctx[0].specs && create_if_block(ctx);

	const block = {
		c: function create() {
			details = element("details");
			summary = element("summary");
			t0 = text(t0_value);
			t1 = space();
			div = element("div");
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			this.h();
		},
		l: function claim(nodes) {
			details = claim_element(nodes, "DETAILS", { class: true });
			var details_nodes = children(details);
			summary = claim_element(details_nodes, "SUMMARY", {});
			var summary_nodes = children(summary);
			t0 = claim_text(summary_nodes, t0_value);
			summary_nodes.forEach(detach_dev);
			t1 = claim_space(details_nodes);
			div = claim_element(details_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			t4 = claim_space(div_nodes);
			if (if_block3) if_block3.l(div_nodes);
			div_nodes.forEach(detach_dev);
			details_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(summary, file, 13, 4, 449);
			attr_dev(div, "class", "rule-body svelte-swvhnw");
			add_location(div, file, 16, 4, 498);
			attr_dev(details, "class", "rule-ref svelte-swvhnw");
			add_location(details, file, 12, 0, 393);
		},
		m: function mount(target, anchor) {
			insert_dev(target, details, anchor);
			append_dev(details, summary);
			append_dev(summary, t0);
			append_dev(details, t1);
			append_dev(details, div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			append_dev(div, t2);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t3);
			if (if_block2) if_block2.m(div, null);
			append_dev(div, t4);
			if (if_block3) if_block3.m(div, null);
			details.open = /*rule*/ ctx[0].visible;
			current = true;

			if (!mounted) {
				dispose = listen_dev(details, "toggle", /*details_toggle_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*rule*/ 1) && t0_value !== (t0_value = /*rule*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					}

					transition_in(if_block0, 1);
					if_block0.m(div, t2);
				} else {
					if_block0 = null;
				}
			}

			if (/*rule*/ ctx[0].subrules) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*rule*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*rule*/ ctx[0].table != undefined) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*rule*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t4);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*rule*/ ctx[0].specs) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*rule*/ 1) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (dirty & /*rule*/ 1) {
				details.open = /*rule*/ ctx[0].visible;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(details);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ManRule", slots, []);
	let { rule } = $$props;
	const writable_props = ["rule"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ManRule> was created with unknown prop '${key}'`);
	});

	function details_toggle_handler() {
		rule.visible = this.open;
		$$invalidate(0, rule);
	}

	$$self.$$set = $$props => {
		if ("rule" in $$props) $$invalidate(0, rule = $$props.rule);
	};

	$$self.$capture_state = () => ({
		Gear,
		GearBlock,
		ManRuleDesc,
		ManRuleSpecs,
		ManRuleTable,
		ManSubRule,
		rule
	});

	$$self.$inject_state = $$props => {
		if ("rule" in $$props) $$invalidate(0, rule = $$props.rule);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rule, details_toggle_handler];
}

class ManRule extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { rule: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ManRule",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rule*/ ctx[0] === undefined && !("rule" in props)) {
			console.warn("<ManRule> was created without expected prop 'rule'");
		}
	}

	get rule() {
		throw new Error("<ManRule>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rule(value) {
		throw new Error("<ManRule>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/manual/index.svelte generated by Svelte v3.29.0 */
const file$1 = "src/routes/manual/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (56:1) {:else}
function create_else_block(ctx) {
	let div;
	let p;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t = text("No results.");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No results.");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$1, 57, 3, 1245);
			attr_dev(div, "class", "no-results svelte-1wa8vfv");
			add_location(div, file$1, 56, 2, 1217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(56:1) {:else}",
		ctx
	});

	return block;
}

// (50:1) {#if ruleList.length}
function create_if_block_1$1(ctx) {
	let div;
	let current;
	let each_value_1 = /*ruleList*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "rule-body-section svelte-1wa8vfv");
			add_location(div, file$1, 50, 2, 1103);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*ruleList*/ 1) {
				each_value_1 = /*ruleList*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(50:1) {#if ruleList.length}",
		ctx
	});

	return block;
}

// (41:1) {#if !searchTerm}
function create_if_block$1(ctx) {
	let each_1_anchor;
	let each_value = Manual;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*Manual*/ 0) {
				each_value = Manual;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(41:1) {#if !searchTerm}",
		ctx
	});

	return block;
}

// (52:3) {#each ruleList as rule}
function create_each_block_1(ctx) {
	let manrule;
	let current;

	manrule = new ManRule({
			props: { rule: /*rule*/ ctx[7] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(manrule.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(manrule.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(manrule, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const manrule_changes = {};
			if (dirty & /*ruleList*/ 1) manrule_changes.rule = /*rule*/ ctx[7];
			manrule.$set(manrule_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(manrule.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(manrule.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(manrule, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(52:3) {#each ruleList as rule}",
		ctx
	});

	return block;
}

// (42:2) {#each Manual as chapter}
function create_each_block$1(ctx) {
	let a;
	let t0_value = /*chapter*/ ctx[4].name + "";
	let t0;
	let t1;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = `/manual/${/*chapter*/ ctx[4].name.toLowerCase()}`);
			attr_dev(a, "class", "link-btn menu-btn");
			add_location(a, file$1, 42, 3, 947);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(42:2) {#each Manual as chapter}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let div1;
	let div0;
	let t1;
	let t2;
	let input;
	let t3;
	let div2;
	let current_block_type_index;
	let if_block;
	let t4;
	let backbutton;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$1, create_if_block_1$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*searchTerm*/ ctx[1]) return 0;
		if (/*ruleList*/ ctx[0].length) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	backbutton = new BackButton({ props: { path: "/" }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			t1 = text("Manual");
			t2 = space();
			input = element("input");
			t3 = space();
			div2 = element("div");
			if_block.c();
			t4 = space();
			create_component(backbutton.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-7xh5b\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, "Manual");
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);

			input = claim_element(div1_nodes, "INPUT", {
				type: true,
				class: true,
				placeholder: true
			});

			div1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(backbutton.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Apocalyptia Online - Manual";
			attr_dev(div0, "class", "rules-name svelte-1wa8vfv");
			add_location(div0, file$1, 30, 1, 725);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "search-bar svelte-1wa8vfv");
			attr_dev(input, "placeholder", "Search");
			add_location(input, file$1, 33, 1, 768);
			attr_dev(div1, "class", "man-header-section svelte-1wa8vfv");
			add_location(div1, file$1, 29, 0, 691);
			attr_dev(div2, "class", "content-menu svelte-1wa8vfv");
			add_location(div2, file$1, 39, 0, 870);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t1);
			append_dev(div1, t2);
			append_dev(div1, input);
			set_input_value(input, /*searchTerm*/ ctx[1]);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			if_blocks[current_block_type_index].m(div2, null);
			insert_dev(target, t4, anchor);
			mount_component(backbutton, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*searchTerm*/ 2 && input.value !== /*searchTerm*/ ctx[1]) {
				set_input_value(input, /*searchTerm*/ ctx[1]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div2, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(backbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(backbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			if_blocks[current_block_type_index].d();
			if (detaching) detach_dev(t4);
			destroy_component(backbutton, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Manual", slots, []);
	let masterRuleList = [];
	Manual.forEach(r => masterRuleList = masterRuleList.concat(r.list));
	let ruleList = [];

	beforeUpdate(_ => {
		$$invalidate(0, ruleList = [...masterRuleList]);

		if (searchTerm) {
			$$invalidate(0, ruleList = ruleList.filter(rule => {
				const ruleName = rule.name.toLocaleLowerCase();
				const searchName = searchTerm.toLocaleLowerCase();
				return ruleName.includes(searchName);
			}));
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Manual> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		searchTerm = this.value;
		$$invalidate(1, searchTerm);
	}

	$$self.$capture_state = () => ({
		BackButton,
		Manual,
		ManRule,
		beforeUpdate,
		masterRuleList,
		ruleList,
		searchTerm
	});

	$$self.$inject_state = $$props => {
		if ("masterRuleList" in $$props) masterRuleList = $$props.masterRuleList;
		if ("ruleList" in $$props) $$invalidate(0, ruleList = $$props.ruleList);
		if ("searchTerm" in $$props) $$invalidate(1, searchTerm = $$props.searchTerm);
	};

	let searchTerm;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	 $$invalidate(1, searchTerm = "");
	return [ruleList, searchTerm, input_input_handler];
}

class Manual_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Manual_1",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Manual_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMzJmZWRlY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21hbnVhbC9NYW5SdWxlLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvbWFudWFsL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGltcG9ydCBHZWFyIGZyb20gJ3J1bGVzL2dlYXIvR2Vhci5qcydcbiAgICBpbXBvcnQgR2VhckJsb2NrIGZyb20gJ3ZpZXdzL3dpZGdldHMvR2VhckJsb2NrLnN2ZWx0ZSdcbiAgICBpbXBvcnQgTWFuUnVsZURlc2MgZnJvbSAndmlld3MvbWFudWFsL01hblJ1bGVEZXNjLnN2ZWx0ZSdcbiAgICBpbXBvcnQgTWFuUnVsZVNwZWNzIGZyb20gJ3ZpZXdzL21hbnVhbC9NYW5SdWxlU3BlY3Muc3ZlbHRlJ1xuICAgIGltcG9ydCBNYW5SdWxlVGFibGUgZnJvbSAndmlld3MvbWFudWFsL01hblJ1bGVUYWJsZS5zdmVsdGUnXG4gICAgaW1wb3J0IE1hblN1YlJ1bGUgZnJvbSAndmlld3MvbWFudWFsL01hblN1YlJ1bGUuc3ZlbHRlJ1xuXG4gICAgZXhwb3J0IGxldCBydWxlXG48L3NjcmlwdD5cblxuXG48ZGV0YWlscyBjbGFzcz0ncnVsZS1yZWYnIGJpbmQ6b3Blbj17cnVsZS52aXNpYmxlfT5cbiAgICA8c3VtbWFyeT5cbiAgICAgICAge3J1bGUubmFtZX1cbiAgICA8L3N1bW1hcnk+XG4gICAgPGRpdiBjbGFzcz0ncnVsZS1ib2R5Jz5cbiAgICAgICAgeyNpZiBydWxlIGluc3RhbmNlb2YgR2VhciB9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdnZWFyLXJ1bGUnPlxuICAgICAgICAgICAgICAgIDxHZWFyQmxvY2sgaXRlbT17cnVsZX0gbW9kZT17J21hbnVhbCd9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgeyNpZiBydWxlLmRlc2MgIT0gdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIDxNYW5SdWxlRGVzYyB7cnVsZX0gLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjaWYgcnVsZS5zdWJydWxlc31cbiAgICAgICAgICAgIHsjZWFjaCBydWxlLnN1YnJ1bGVzIGFzIHN1YnJ1bGV9XG4gICAgICAgICAgICAgICAgPE1hblN1YlJ1bGUge3N1YnJ1bGV9IC8+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjaWYgcnVsZS50YWJsZSAhPSB1bmRlZmluZWR9XG4gICAgICAgICAgICA8TWFuUnVsZVRhYmxlIHtydWxlfSAvPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2lmIHJ1bGUuc3BlY3N9XG4gICAgICAgICAgICA8TWFuUnVsZVNwZWNzIHtydWxlfSAvPlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuPC9kZXRhaWxzPlxuXG5cbjxzdHlsZT5cbiAgICAucnVsZS1yZWYge1xuXHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXMyMDApO1xuXHRcdHdpZHRoOiA4MCU7XG5cdH1cblx0QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NTBweCkge1xuXHRcdC5ydWxlLXJlZiB7XG5cdFx0XHRtYXJnaW4tbGVmdDogYXV0bztcblx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcblx0XHRcdG1heC13aWR0aDogODAlO1xuXHRcdH1cblx0fVxuXHRcdC5ydWxlLWJvZHkge1xuXHRcdFx0cGFkZGluZzogdmFyKC0tczEwMCk7XG5cdFx0fVxuXHRcdFx0LmdlYXItcnVsZSB7XG5cdFx0XHRcdG1hcmdpbjogdmFyKC0tczEwMCk7XG5cdFx0XHR9XG48L3N0eWxlPiIsIjxzY3JpcHQ+XG5cdGltcG9ydCBCYWNrQnV0dG9uIGZyb20gJ3ZpZXdzL3dpZGdldHMvQmFja0J1dHRvbi5zdmVsdGUnXG5cdGltcG9ydCBNYW51YWwgZnJvbSAncnVsZXMvTWFudWFsLmpzJ1xuXHRpbXBvcnQgTWFuUnVsZSBmcm9tICd2aWV3cy9tYW51YWwvTWFuUnVsZS5zdmVsdGUnXG5cdGltcG9ydCB7IGJlZm9yZVVwZGF0ZSB9IGZyb20gJ3N2ZWx0ZSdcblxuXHRsZXQgbWFzdGVyUnVsZUxpc3QgPSBbXVxuXHRNYW51YWwuZm9yRWFjaChyID0+IG1hc3RlclJ1bGVMaXN0ID0gbWFzdGVyUnVsZUxpc3QuY29uY2F0KHIubGlzdCkpXG5cblx0bGV0IHJ1bGVMaXN0ID0gW11cblxuXHQkOiBzZWFyY2hUZXJtID0gJydcblxuXHRiZWZvcmVVcGRhdGUoXyA9PiB7XG5cdFx0cnVsZUxpc3QgPSBbLi4ubWFzdGVyUnVsZUxpc3RdXG5cdFx0aWYgKHNlYXJjaFRlcm0pIHtcblx0XHRcdHJ1bGVMaXN0ID0gcnVsZUxpc3QuZmlsdGVyKHJ1bGUgPT4ge1xuXHRcdFx0XHRjb25zdCBydWxlTmFtZSA9IHJ1bGUubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpXG5cdFx0XHRcdGNvbnN0IHNlYXJjaE5hbWUgPSBzZWFyY2hUZXJtLnRvTG9jYWxlTG93ZXJDYXNlKClcblx0XHRcdFx0cmV0dXJuIHJ1bGVOYW1lLmluY2x1ZGVzKHNlYXJjaE5hbWUpXG5cdFx0XHR9KVxuXHRcdH1cblx0fSlcbjwvc2NyaXB0PlxuXG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkFwb2NhbHlwdGlhIE9ubGluZSAtIE1hbnVhbDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBjbGFzcz0nbWFuLWhlYWRlci1zZWN0aW9uJz5cblx0PGRpdiBjbGFzcz0ncnVsZXMtbmFtZSc+XG5cdFx0TWFudWFsXG5cdDwvZGl2PlxuXHQ8aW5wdXQgdHlwZT0ndGV4dCdcblx0XHRjbGFzcz0nc2VhcmNoLWJhcidcblx0XHRwbGFjZWhvbGRlcj0nU2VhcmNoJ1xuXHRcdGJpbmQ6dmFsdWU9J3tzZWFyY2hUZXJtfSdcblx0Lz5cbjwvZGl2PlxuPGRpdiBjbGFzcz0nY29udGVudC1tZW51Jz5cblx0eyNpZiAhc2VhcmNoVGVybX1cblx0XHR7I2VhY2ggTWFudWFsIGFzIGNoYXB0ZXJ9XG5cdFx0XHQ8YSBocmVmPXtgL21hbnVhbC8ke2NoYXB0ZXIubmFtZS50b0xvd2VyQ2FzZSgpfWB9XG5cdFx0XHRcdGNsYXNzPSdsaW5rLWJ0biBtZW51LWJ0bidcblx0XHRcdD5cblx0XHRcdFx0e2NoYXB0ZXIubmFtZX1cblx0XHRcdDwvYT5cblx0XHR7L2VhY2h9XG5cdHs6ZWxzZX1cblx0eyNpZiBydWxlTGlzdC5sZW5ndGh9XG5cdFx0PGRpdiBjbGFzcz0ncnVsZS1ib2R5LXNlY3Rpb24nPlxuXHRcdFx0eyNlYWNoIHJ1bGVMaXN0IGFzIHJ1bGV9XG5cdFx0XHRcdDxNYW5SdWxlIHtydWxlfSAvPlxuXHRcdFx0ey9lYWNofVxuXHRcdDwvZGl2PlxuXHR7OmVsc2V9XG5cdFx0PGRpdiBjbGFzcz0nbm8tcmVzdWx0cyc+XG5cdFx0XHQ8cD5ObyByZXN1bHRzLjwvcD5cblx0XHQ8L2Rpdj5cblx0ey9pZn1cblx0ey9pZn1cbjwvZGl2PlxuPEJhY2tCdXR0b24gcGF0aD17Jy8nfSAvPlxuXG5cbjxzdHlsZT5cblx0Lm1hbi1oZWFkZXItc2VjdGlvbiB7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTUsIDMwLCAxNSk7XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgbGltZTtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGhlaWdodDogdmFyKC0tczMwMCk7XG5cdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG5cdFx0bGVmdDogMDtcblx0XHRwb3NpdGlvbjogZml4ZWQ7XG5cdFx0cmlnaHQ6IDA7XG5cdFx0dG9wOiB2YXIoLS1zMzUwKTtcblx0XHR6LWluZGV4OiAxO1xuXHR9XG5cdC5ydWxlLWJvZHktc2VjdGlvbiB7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG5cdFx0bWFyZ2luLXRvcDogdmFyKC0tczEwMCk7XG5cdH1cblx0LnJ1bGVzLW5hbWUge1xuXHRcdGZvbnQtc2l6ZTogdmFyKC0tczE1MCk7XG5cdFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdH1cblx0LnNlYXJjaC1iYXIge1xuXHRcdG1pbi13aWR0aDogMTAwcHg7XG5cdFx0cGFkZGluZzogdmFyKC0tczI1KSB2YXIoLS1zMTAwKTtcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHRcdHdpZHRoOiA0NSU7XG5cdH1cblx0LmNvbnRlbnQtbWVudSB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHRvcDogdmFyKC0tczMwMCk7XG5cdFx0bGVmdDogMDtcblx0XHRyaWdodDogMDtcblx0XHRwYWRkaW5nOiB2YXIoLS1zMTAwKTtcblx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zMTUwKTtcblx0XHRtYXJnaW4tdG9wOiB2YXIoLS1zNTApO1xuXHR9XG5cdC5uby1yZXN1bHRzIHtcblx0XHRwYWRkaW5nLWxlZnQ6IDEwdnc7XG5cdFx0cGFkZGluZy10b3A6IDJ2aDtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBbUJpQyxHQUFJLFdBQVEsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2REFBcEIsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQVFsQixHQUFJLElBQUMsUUFBUTs7OztnQ0FBbEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUFDLEdBQUksSUFBQyxRQUFROzs7OytCQUFsQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
