!function(){"use strict";const e=1603084624510,t="cache"+e,c=["/client/client.04a4a16d.js","/client/inject_styles.5607aec6.js","/client/index.0eda49dc.js","/client/index.c6565f57.js","/client/BackButton.a85c0f0f.js","/client/characterStore.e04b972f.js","/client/CharacterSheet.03b14f1e.js","/client/BombList.4927c2b7.js","/client/StorageList.71288974.js","/client/AppendToGUUID.176d1458.js","/client/Skills.35c4252b.js","/client/Abilities.5f272c11.js","/client/SWBodyguard.54177d3a.js","/client/Speed.66ad8113.js","/client/RangedWeaponList.4703ea51.js","/client/Thermite.a457c57f.js","/client/GearBlock.b7b0b7c1.js","/client/RandomRoll.f18d347c.js","/client/Specialty.adf26afb.js","/client/Traits.2656d3ca.js","/client/ConstitutionSkills.56e093ee.js","/client/_layout.1c14a77e.js","/client/description.70db2c7e.js","/client/Description.8a5b4d62.js","/client/properties.2fa794e4.js","/client/Properties.2daf5f2c.js","/client/abilities.1b2da5ae.js","/client/skills.2fdabb80.js","/client/Slider.5ff3a1d3.js","/client/traits.9ddd5ee7.js","/client/sheet.642bd852.js","/client/gear.0755ba4d.js","/client/RandomStartingGear.1aaace4b.js","/client/d6.b655a31f.js","/client/load.edc5e6b7.js","/client/new.2cf11d0f.js","/client/index.b6c65472.js","/client/index.961de491.js","/client/ManSubRule.2b9b58d5.js","/client/[chapter].b3245e36.js","/client/index.3a802949.js","/client/Spinner.7b0034d3.js","/client/index.1ff6b967.js","/client/recover.e9c22408.js"].concat(["/service-worker-index.html","/404.svg","/__index.html","/favicon.gif","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/robots.txt"]),n=new Set(c);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(c))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const c of e)c!==t&&await caches.delete(c);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const c=new URL(t.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&n.has(c.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const c=await fetch(t.request);return e.put(t.request,c.clone()),c}catch(c){const n=await e.match(t.request);if(n)return n;throw c}})))))}))}();
