{
  "version": 3,
  "file": "apocalyptia-online.css",
  "sources": [
    "../src/layout/ViewScreen.svelte",
    "../src/layout/TitleBar.svelte",
    "../src/layout/DisplayWindow.svelte",
    "../src/pages/Home.svelte",
    "../src/pages/Creator.svelte",
    "../src/pages/Reference.svelte",
    "../src/layout/BackNextButtons.svelte",
    "../src/layout/RefList.svelte",
    "../src/components/creator/Skills.svelte",
    "../src/components/creator/Traits.svelte",
    "../src/components/creator/Description.svelte",
    "../src/components/creator/Abilities.svelte"
  ],
  "sourcesContent": [
    "<div class='view-screen'>\n    <slot />\n</div>\n\n<style>\n\t.view-screen {\n\t\theight: 100vh;\n\t\toverflow-x: hidden;\n\t\toverflow-y: auto;\n\t\twidth: 100vw;\n\t}\n\t.view-screen:before {\n\t\tanimation: hline 10s linear infinite;\n\t\tbackground: rgb(100, 250, 100, .1);\n\t\tcontent: '';\n\t\tfont-size: 1px;\n\t\theight: 1px;\n\t\tposition: absolute;\n\t\twidth: 100vw;\n\t\tz-index: 1000;\n\t}\n\t@keyframes hline {\n\t\t0%   { top: 0; }\n\t\t100% { top: 99%; } \n\t}\n</style>\n",
    "<script>\n    import router from '../routes'\n</script>\n\n<button class='title-bar' on:click={router.Home}>\n    <span class='title'>Apocalyptia Online</span>\n    <span class='beta'>beta</span>\n</button>\n\n<style>\n    .title-bar {\n        height: 50px;\n        position: fixed;\n        text-align: center;\n        top: 0;\n        width: 100vw;\n        z-index: 1;\n    }\n    .title {\n        font-size: 1.8rem;\n    }\n    .beta {\n        color: lightcoral;\n        border: 1px dotted lightcoral;\n        font-size: .8rem;\n        padding: 3px;\n    }\n</style>",
    "<div class='display-window'>\n    <slot />\n</div>\n\n<style>\n    .display-window {\n        bottom: 50px;\n        height: calc(100vh - 100px);\n        position: absolute;\n        top: 50px;\n        width: 100vw;\n    }\n</style>",
    "<script>\n    import router from '../routes'\n\timport Creator from './Creator.svelte'\n\timport Reference from './Reference.svelte'\n</script>\n\n<div class='home-page'>\n    <button on:click={router.Creator}>Character Creator</button>\n    <button on:click={router.Reference}>Rules Reference</button>\n</div>\n\n<style>\n    .home-page {\n        padding: 25px;\n        text-align: center;\n    }\n    button {\n        padding: 2rem;\n        width: 70%;\n        margin: 1rem auto;\n    }\n</style>",
    "<script>\n    import router from '../routes'\n    import BackNextButtons from '../layout/BackNextButtons.svelte'\n\n    import Description from '../components/creator/Description.svelte'\n    import Traits from '../components/creator/Traits.svelte'\n    import Skills from '../components/creator/Skills.svelte'\n    import Properties from '../components/creator/Properties.svelte'\n    import Abilities from '../components/creator/Abilities.svelte'\n    import Gear from '../components/creator/Gear.svelte'\n\n    let step = 0\n    const options = [ Traits, Properties, Description, Traits, Skills, Properties, Abilities, Gear ]\n    let selected = options[step]\n\n    function nav(event) {\n        step = event.detail.number\n        if (step == options.length || step < 0) { router.Home() }\n        else { selected = options[step] }\n    }\n</script>\n\n<div>\n    <svelte:component this={selected}/>\n</div>\n<BackNextButtons {step} on:message={nav} />\n\n<style>\n    div {\n        padding: 20px;\n        width: calc(100vw - 40px);\n    }\n</style>\n",
    "<script>\n    import router from '../routes'\n    import BackNextButtons from '../layout/BackNextButtons.svelte'\n    import RefList from '../layout/RefList.svelte'\n    // TODO: Add remaining rules sections: Dice, Creation, Traits, Skills, Properties, Abilities, Gear\n    import { Combat } from '../rules/combat/CombatRules'\n    import { Maneuvers } from '../rules/maneuvers/ManeuverRules'\n    import { Situations } from '../rules/situations/SituationRules'\n\n    let step = 0\n    const pages = [\n        { name: 'Combat', rules: Combat },\n        { name: 'Maneuvers', rules: Maneuvers },\n        { name: 'Situations', rules: Situations }\n    ]\n    let selected = pages[step]\n\n    function nav(event) {\n        step = event.detail.number\n        if (step == pages.length || step < 0) { router.Home() }\n        else { selected = pages[step] }\n    }\n</script>\n\n<div class='ref-page'>\n    <svelte:component this={RefList} list={selected} />\n</div>\n<BackNextButtons {step} on:message={nav} />\n\n<style>\n    .ref-page {\n        padding: 25px;\n        padding-bottom: 50px;\n    }\n</style>",
    "<script>\n    import { createEventDispatcher } from 'svelte'\n    export let step\n\n    const d = createEventDispatcher()\n\n    function back () { d('message', { number: --step }) }\n\n    function next() { d('message', { number: ++step }) }\n</script>\n\n<div>\n    <button on:click={back}>Back</button>\n    <button on:click={next}>Next</button>\n</div>\n\n<style>\n    div {\n        display: flex;\n        flex-direction: row;\n        position: fixed;\n        left: 0;\n        bottom: 0px;\n        height: 50px;\n        width: 100vw;\n    }\n    button {\n        border: 1px solid;\n        width: 50vw;\n    }\n</style>",
    "<script>\n    import HideShow from './HideShow'\n\n    export let list\n</script>\n\n<div class='page'>\n    <h2>{list.name}</h2>\n    <div class='separator'/>\n    {#each list.rules as r}\n        <div class='box' on:click={() => list = HideShow(r, list)}>\n            <span class='name'>{r.name}</span>\n            {#if r.visible}\n                <div class='notes'>{@html r.notes}</div>\n                {#if r.table}\n                    <div class='separator'/>\n                    <div class='table'><svelte:component this={r.table}/></div>\n                {/if}\n                {#if r.subrules}\n                    <ul class='sub-ul'>\n                        {#each r.subrules as s}\n                            <div class='separator'/>\n                            <li class='sub-li'>\n                                <div class='sub-box'>\n                                    <span class='sub-name'>{s.name}</span>\n                                    <div class='sub-notes'>{@html s.notes}</div>\n                                </div>\n                            </li>    \n                        {/each}\n                    </ul>\n                {/if}\n            {/if}\n        </div>\n        <div class='separator'/>\n    {/each}\n</div>\n\n<style>\n    .box {\n        border: 1px dotted lime;\n        padding: 25px;\n    }\n    .name {\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n    .notes {\n        padding-top: 25px;\n    }\n    .separator {\n        height: 25px;\n    }\n    .sub-ul {\n        list-style: none;\n    }\n    .sub-name {\n        font-size: 1.1em;\n        font-weight: bold;\n    }\n</style>",
    "<script>\n    import { CharacterStore } from '../../rules/Stores'\n    let char\n    const unsubscribe = CharacterStore.subscribe(value => { char = value })\n\n    const traits = Object.keys(char.traits)\n    const skills = Object.keys(char.skills)\n\n    let startingSkillPoints = char.traits.brains.score * 3\n    let remaining = startingSkillPoints\n\n    function countSkillPoints() {\n        let skillCount = 0\n        skills.forEach((skill) => { skillCount += char.skills[skill].score })\n        remaining = startingSkillPoints - skillCount\n        char.updateProps()\n    }\n</script>\n\n<div class='step'>\n    <div class='step-title'>\n        <h2>Skills</h2>\n    </div>\n    <div class='remaining'>\n        <h3>Points Remaining: {remaining}</h3>\n    </div>\n    {#each traits as trait}\n        <div class='skill-section'>\n            <div class='parent-trait-title'>\n                {char.traits[trait].name} Skills\n            </div>\n            {#each skills as skill}\n                {#if char.traits[trait].name == char.skills[skill].parent}\n                    <div class='stat-block'>\n                        <span class='stat-label'>{char.skills[skill].name}</span>\n                        <input\n                            class='stat-input'\n                            type='number'\n                            min='0'\n                            max='{Math.min(char.traits[trait].score, (char.skills[skill].score + remaining))}'\n                            on:input={countSkillPoints}\n                            bind:value={char.skills[skill].score}\n                        >\n                    </div>\n                {/if}\n            {/each}\n        </div>\n    {/each}\n</div>\n\n<style>\n    .skill-section{\n        border: 1px dashed var(--char-color);\n\t\tmargin: 20px 5px 20px 5px;\n        padding: 0 10px 10px 10px;\n    }\n    .parent-trait-title {\n        margin-bottom: 10px;\n    }\n    .remaining {\n        margin-left: 2rem;\n    }\n</style>",
    "<script>\n    import { CharacterStore } from '../../rules/Stores'\n    let char\n    const unsubscribe = CharacterStore.subscribe(value => { char = value })\n\n    const traits = Object.keys(char.traits)\n\n    const traitPoints = 12\n    let remaining = traitPoints - traits.length\n\n    function countTraitPoints() {\n        let traitCount = 0\n        traits.forEach((trait) => { traitCount += char.traits[trait].score })\n        remaining = traitPoints - traitCount\n        char.updateProps()\n    }\n</script>\n\n<div class='step'>\n    <div class='step-title'>\n        <h2>Traits</h2>\n    </div>\n    <div class='remaining'>\n        <h3>Points Remaining: {remaining}</h3>\n    </div>\n    {#each traits as trait}\n        <div class='stat-block'>\n            <span class='stat-label'>{char.traits[trait].name}</span>\n            <input\n                class='stat-input'\n                type='number'\n                min='1'\n                max={Math.min(char.traits[trait].max, (char.traits[trait].score + remaining))}\n                on:input={countTraitPoints}\n                bind:value={char.traits[trait].score}\n            >\n        </div>\n    {/each}\n</div>\n\n<style>\n    .remaining {\n        margin-left: 2rem;\n    }\n</style>",
    "<script>\n    import { femaleNames, maleNames } from '../../assets/lists/Names'\n    import { CharacterStore } from '../../rules/Stores'\n    let char\n    const unsubscribe = CharacterStore.subscribe(value => { char = value })\n\n    function random(array) { return array[Math.ceil(Math.random() * array.length) - 1] }\n\n    function randomName() {\n        if (char.description.gender.value == 'Male') { char.description.characterName.value = random(maleNames) }\n        else if (char.description.gender.value == 'Female') { char.description.characterName.value = random(femaleNames) } \n        else { char.description.characterName.value = random([...femaleNames, ...maleNames]) }\n    }\n\n    function randomHeight() {\n        const totalInches = Math.ceil((Math.random() * 18) + 58) // 4'11' low, 5'7' median, 6'4' high\n        const feet = Math.floor(totalInches / 12)\n        const inches = Math.floor(totalInches % 12)\n        char.description.height.value = `${feet}' ${inches}\"`\n    }\n\n    function randomWeight() { char.description.weight.value = `${Math.ceil(Math.random() * 100) + 100}lbs` } // 101 to 200 lbs\n\n    function randomHair() {\n        char.description.hair.value = random(\n            [\n                'Auburn',\n                'Bald',\n                'Black',\n                'Blonde',\n                'Brunette',\n                'Gray',\n                'Red',\n                'White',\n            ]\n        )\n    }\n\n    function randomSkin() { char.description.skin.value = random(\n            [\n                'Black',\n                'Brown',\n                'Olive',\n                'Pale',\n                'Tan',\n                'White',\n            ]\n        ) \n    }\n\n    function randomGender() { char.description.gender.value = random(['Female', 'Male']) }\n\n    function randomAge() { char.description.age.value = Math.ceil((Math.random() * 33) + 17) }\n\n    function randomDescription() {\n        randomAge()\n        randomGender()\n        randomSkin()\n        randomHair()\n        randomWeight()\n        randomHeight()\n        randomName()\n    }\n</script>\n\n<div class='step'>\n    <div class='step-title'>\n        <h2>Description</h2>\n    </div>\n    <div class='stat-block'>\n        <span class='stat-label'>Player:</span>\n        <input\n            type='text'\n            bind:value={char.description.playerName.value}\n        >\n    </div>\n    <div class='stat-block'>\n        <span class='stat-label'>Character:</span>\n        <input bind:value={char.description.characterName.value}>\n        <button on:click={randomName}>Random</button>\n    </div>\n    <div class='stat-block'>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Height:</span>\n            <input class='half-input' bind:value={char.description.height.value}>\n            <button on:click={randomHeight}>Random</button>\n        </div>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Weight:</span>\n            <input class='half-input' bind:value={char.description.weight.value}>\n            <button on:click={randomWeight}>Random</button>\n        </div>\n    </div>\n    <div class='stat-block'>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Hair:</span>\n            <input class='half-input' bind:value={char.description.hair.value}>\n            <button on:click={randomHair}>Random</button>\n        </div>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Skin:</span>\n            <input class='half-input' bind:value={char.description.skin.value}>\n            <button on:click={randomSkin}>Random</button>\n        </div>\n    </div>\n    <div class='stat-block'>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Gender:</span>\n            <input class='half-input' bind:value={char.description.gender.value}>\n            <button on:click={randomGender}>Random</button>\n        </div>\n        <div class='half-stat-block'>\n            <span class='stat-label'>Age:</span>\n            <input class='half-input' bind:value={char.description.age.value}>\n            <button on:click={randomAge}>Random</button>\n        </div>\n    </div>\n    <div class='stat-block'>\n        <button class='random-all' on:click={randomDescription}>Random Character</button>\n    </div>\n</div>\n\n<style >\n    @media only screen and (max-width: 600px) {\n        .stat-label {\n            display: block;\n        }\n        input {\n            display: inline-block;\n            width: 100%;\n        }\n        button {\n            display: block;\n            float: right;\n        }\n        .half-stat-block {\n            display: block;\n            padding: 5px;\n            width: 55%;\n        }\n    }\n    .stat-label {\n        display: block;\n    }\n    input {\n        height: 1.75em;\n        width: 50% ;\n    }\n    button {\n        height: 1.75em;\n        padding: 2px;\n    }\n    .random-all {\n        margin: auto;\n        padding: 5px;\n    }\n    .half-stat-block {\n        width: 50% ;\n    }\n</style>",
    "<script>\n    import { AbilityList } from '../../rules/character/Abilities'\n    import { CharacterStore } from '../../rules/Stores'\n    let char\n    const unsubscribe = CharacterStore.subscribe(value => { char = value })\n\n    function modifyAbilities() {\n        char.abilities = []\n        AbilityList.forEach(function (ability) {\n            if (ability.taken > 0) {\n                char.abilities.push(ability)\n            }\n        })\n    }\n</script>\n\n<div class='step'>\n    <div class='step-title'>\n        <h2>Abilities</h2>\n    </div>\n    <div class='stat-block'>\n        <div class='abilities-table'>\n            <div class='ability-row header-row separator'>\n                <div class='m-col'>Name</div>\n                <div class='l-col'>Description</div>\n                <div class='s-col'>Max</div>\n                <div class='s-col'>XP</div>\n                <div class='s-col'>Taken</div>\n            </div>\n            {#each AbilityList as ability, index}\n                {#if AbilityList[index-1] != undefined && AbilityList[index].xp != AbilityList[index-1].xp}\n                    <div class='separator'></div>\n                {/if}\n                <div class='ability-row'>\n                    <div class='m-col'>{ability.name}</div>\n                    <div class='l-col'>{ability.description}</div>\n                    <div class='s-col'>{ability.max}</div>\n                    <div class='s-col'>{ability.xp}</div>\n                    <div class='s-col'>\n                        <input\n                            type='number'\n                            class='taken-number'\n                            min=0\n                            max={ability.max}\n                            bind:value={ability.taken}\n                            on:input={modifyAbilities}\n                        >\n                    </div>\n                </div>\n            {/each}\n        </div>\n    </div>\n</div>\n\n<style>\n    .abilities-table {\n        width: 100%;\n    }\n    .ability-row {\n        width: inherit;\n    }\n    .header-row {\n        font-size: 1.25em;\n    }\n    .l-col {\n        display: inline-block;\n        width: 37.5%;\n    }\n    .m-col {\n        display: inline-block;\n        width: 25%;\n    }\n    .s-col {\n        display: inline-block;\n        text-align: center;\n        width: 10%;\n    }\n    .separator {\n        border-bottom: 1px solid;\n        margin-bottom: 10px;\n        padding-bottom: 10px;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}