type Character {
	Mi: ID! @unique
	Mu: String!
	Ms: String!
	Mc: Boolean!
	Mr: String!
	Ml: String!
	Mn: String
	Mm: String!
	Mx: Int!
	My: Int!
	Da: Int!
	Di: String!
	Dh: String!
	De: String!
	Ds: String!
	Sk: String!
	Dw: Int!
	Ta: Int!
	Tb: Int!
	Tc: Int!
	Td: Int!
	ac: Int!
	la: Int!
	ra: Int!
	st: Int!
	md: Int!
	pe: Int!
	sc: Int!
	su: Int!
	at: Int!
	bu: Int!
	dr: Int!
	me: Int!
	le: Int!
	pr: Int!
	so: Int!
	ta: Int!
	Pl: Int!
	Pp: Int!
	hD: Int!
	rA: Int!
	lA: Int!
	tO: Int!
	lL: Int!
	rL: Int!
	Ab: [Ability!]! @relation
	Ga: [Gear!]! @relation
	Gm: [Gear!]! @relation
	Gr: [Gear!]! @relation
	Go: [Gear!]! @relation
	Ge: [Gear!]! @relation
}

type Ability @embedded {
	i: ID! @unique
	t: Int!
}

type Gear @embedded {
	i: ID! @unique
	q: Int!
}


type Query {
	readCharacter(user: String!, id: ID!): Character
}

mutation CreateCharacter {
	createCharacter(user: String!, character: Character): Character
}

mutation UpdateCharacter {
	updateCharacter(user: String!, character: Character): Character
}

mutation DeleteCharacter {
	deleteCharacter(user: String!, character: Character): Character
}